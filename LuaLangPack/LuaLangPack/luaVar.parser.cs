using System;using Tools;
namespace LuaVarParser {
//%+field+54
public class field : SYMBOL{
 private  exp  e ;
 public  field (Parser yyp, exp  a ):base(((syntax)yyp)){ e = a ;
}

public override string yyname { get { return "field"; }}
public override int yynum { get { return 54; }}
public field(Parser yyp):base(yyp){}}
//%+FieldExpAssign+55
public class FieldExpAssign : field{
 private  exp  e1 ;
 private  exp  e2 ;
 public  FieldExpAssign (Parser yyp, exp  a , exp  b ):base(((syntax)yyp)){ e1 = a ;
 e2 = b ;
}

public override string yyname { get { return "FieldExpAssign"; }}
public override int yynum { get { return 55; }}
public FieldExpAssign(Parser yyp):base(yyp){}}
//%+FieldAssign+56
public class FieldAssign : field{
 private  NAME  n ;
 private  exp  e ;
 public  FieldAssign (Parser yyp, NAME  a , exp  b ):base(((syntax)yyp)){ n = a ;
 e = b ;
}

public override string yyname { get { return "FieldAssign"; }}
public override int yynum { get { return 56; }}
public FieldAssign(Parser yyp):base(yyp){}}
//%+fieldlist+57
public class fieldlist : SYMBOL{
 private  fieldlist  fl ;
 private  field  f ;
 public  fieldlist (Parser yyp, field  a , fieldlist  b ):base(((syntax)yyp)){ f = a ;
 fl = b ;
}
 public  fieldlist (Parser yyp, field  a ):base(((syntax)yyp)){ f = a ;
}

public override string yyname { get { return "fieldlist"; }}
public override int yynum { get { return 57; }}
public fieldlist(Parser yyp):base(yyp){}}
//%+tableconstructor+58
public class tableconstructor : SYMBOL{
 private  fieldlist  f ;
 private  LBRACE  open ;
 private  RBRACE  close ;
 public  tableconstructor (Parser yyp, fieldlist  a , LBRACE  b , RBRACE  c ):base(((syntax)yyp)){ f = a ;
 open = b ;
 close = c ;
}

public override string yyname { get { return "tableconstructor"; }}
public override int yynum { get { return 58; }}
public tableconstructor(Parser yyp):base(yyp){}}
//%+functioncall+59
public class functioncall : SYMBOL{
 private  prefixexp  p ;
 private  arg  m_a ;
 public  functioncall (Parser yyp, prefixexp  a , arg  b ):base(((syntax)yyp)){ p = a ;
 m_a = b ;
}
 public  ILuaName  Resolve ( LuaScope  s , int  line , int  pos ){ ILuaName  fname = p . Resolve ( s , line , pos );
 if ( fname == null ) return  null ;
 LuaFunction  fun =( LuaFunction ) s . Lookup ( fname . name , line , pos );
 if ( fun == null || fun . type != LuaType . Function || fun . RetStats . Count !=1) return  null ;
 else { return  fun . RetStats . First . Value . Resolve ( s );
}
}

public override string yyname { get { return "functioncall"; }}
public override int yynum { get { return 59; }}
public functioncall(Parser yyp):base(yyp){}}
//%+prefixexp+60
public class prefixexp : SYMBOL{
 private  var  v ;
 private  functioncall  fc ;
 private  exp  e ;
 public  prefixexp (Parser yyp, var  a ):base(((syntax)yyp)){ v = a ;
}
 public  prefixexp (Parser yyp, functioncall  a ):base(((syntax)yyp)){ fc = a ;
}
 public  prefixexp (Parser yyp, exp  a ):base(((syntax)yyp)){ e = a ;
}
 public  ILuaName  Resolve ( LuaScope  s , int  line , int  pos ){ if ( v != null ){ return  v . Resolve ( s , line , pos );
}
 else  if ( fc != null ){ return  fc . Resolve ( s , line , pos );
}
 else  return  null ;
}

public override string yyname { get { return "prefixexp"; }}
public override int yynum { get { return 60; }}
public prefixexp(Parser yyp):base(yyp){}}
//%+exp+61
public class exp : SYMBOL{
 private  prefixexp  p ;
 private  tableconstructor  t ;
 private  bool  nil = false ;
 private  bool  number = false ;
 private  bool  bfalse = false ;
 private  bool  btrue = false ;
 private  LITERAL  l ;
 public  exp (Parser yyp, prefixexp  b ):base(((syntax)yyp)){ p = b ;
}
 public  exp (Parser yyp, NIL  a ):base(((syntax)yyp)){ nil = true ;
}
 public  exp (Parser yyp, FALSE  a ):base(((syntax)yyp)){ bfalse = true ;
}
 public  exp (Parser yyp, TRUE  a ):base(((syntax)yyp)){ btrue = true ;
}
 public  exp (Parser yyp, NUMBER  a ):base(((syntax)yyp)){ number = true ;
}
 public  exp (Parser yyp, tableconstructor  c ):base(((syntax)yyp)){ t = c ;
}
 public  exp (Parser yyp, LITERAL  d ):base(((syntax)yyp)){ l = d ;
}
 public  ILuaName  Resolve ( LuaScope  s , int  line , int  pos ){ if ( l != null ){ LuaName  name = new  LuaName ();
 name . name = l . s ;
 name . pos = l . Position ;
 name . line = l . Line -1;
 return  name ;
}
 else  return  null ;
}

public override string yyname { get { return "exp"; }}
public override int yynum { get { return 61; }}
public exp(Parser yyp):base(yyp){}}
//%+explist+62
public class explist : SYMBOL{
 private  explist  l ;
 private  exp  e ;
 public  explist (Parser yyp, exp  a , explist  b ):base(((syntax)yyp)){ e = a ;
 l = b ;
}
 public  explist (Parser yyp, exp  a ):base(((syntax)yyp)){ e = a ;
}
 public  ILuaName  Resolve ( LuaScope  s , int  line , int  pos ){ return  e . Resolve ( s , line , pos );
}

public override string yyname { get { return "explist"; }}
public override int yynum { get { return 62; }}
public explist(Parser yyp):base(yyp){}}
//%+var+63
public class var : SYMBOL{
 private  NAME  n ;
 public  var (Parser yyp, NAME  a ):base(((syntax)yyp)){ n = a ;
}
 public  virtual  ILuaName  Resolve ( LuaScope  s , int  line , int  pos ){ return  s . Lookup ( n . s , line , pos );
}

public override string yyname { get { return "var"; }}
public override int yynum { get { return 63; }}
public var(Parser yyp):base(yyp){}}
//%+PackageRef+64
public class PackageRef : var{
 private  NAME  n ;
 private  prefixexp  p ;
 public  PackageRef (Parser yyp, prefixexp  a , NAME  b ):base(((syntax)yyp)){ p = a ;
 n = b ;
}
 public  override  ILuaName  Resolve ( LuaScope  s , int  line , int  pos ){ ILuaName  name = p . Resolve ( s , line , pos );
 if ( name != null && name . type == LuaType . Table ){ LuaTable  t =( LuaTable ) name ;
 return  t . Lookup ( n . s , line , pos );
}
 else  return  null ;
}

public override string yyname { get { return "PackageRef"; }}
public override int yynum { get { return 64; }}
public PackageRef(Parser yyp):base(yyp){}}
//%+TableRef+65
public class TableRef : var{
 private  prefixexp  p ;
 private  exp  e ;
 public  TableRef (Parser yyp, prefixexp  a , exp  b ):base(((syntax)yyp)){ p = a ;
 e = b ;
}
 public  override  ILuaName  Resolve ( LuaScope  s , int  line , int  pos ){ ILuaName  name = p . Resolve ( s , line , pos );
 ILuaName  l = e . Resolve ( s , line , pos );
 if ( name != null && name . type == LuaType . Table ){ LuaTable  t =( LuaTable ) name ;
 return  t . Lookup ( l . name , l . line , l . pos );
}
 else  return  null ;
}

public override string yyname { get { return "TableRef"; }}
public override int yynum { get { return 65; }}
public TableRef(Parser yyp):base(yyp){}}
//%+arg+66
public class arg : SYMBOL{
 private  explist  e ;
 private  tableconstructor  t ;
 public  arg (Parser yyp, tableconstructor  a ):base(((syntax)yyp)){ t = a ;
}
 public  arg (Parser yyp, explist  a ):base(((syntax)yyp)){ e = a ;
}

public override string yyname { get { return "arg"; }}
public override int yynum { get { return 66; }}
public arg(Parser yyp):base(yyp){}}

public class var_1 : var {
  public var_1(Parser yyq):base(yyq, 
	((NAME)(yyq.StackAt(0).m_value))
	 ){}}

public class TableRef_1 : TableRef {
  public TableRef_1(Parser yyq):base(yyq, 
	((prefixexp)(yyq.StackAt(3).m_value))
	, 
	((exp)(yyq.StackAt(1).m_value))
	 ){}}

public class PackageRef_1 : PackageRef {
  public PackageRef_1(Parser yyq):base(yyq, 
	((prefixexp)(yyq.StackAt(2).m_value))
	, 
	((NAME)(yyq.StackAt(0).m_value))
	 ){}}

public class fieldlist_1 : fieldlist {
  public fieldlist_1(Parser yyq):base(yyq, 
	((field)(yyq.StackAt(0).m_value))
	 ){}}

public class fieldlist_2 : fieldlist {
  public fieldlist_2(Parser yyq):base(yyq, 
	((field)(yyq.StackAt(2).m_value))
	, 
	((fieldlist)(yyq.StackAt(0).m_value))
	 ){}}

public class fieldlist_3 : fieldlist {
  public fieldlist_3(Parser yyq):base(yyq, 
	((field)(yyq.StackAt(1).m_value))
	 ){}}
public class fieldsep : SYMBOL {
	public fieldsep(Parser yyq):base(yyq) { }
  public override string yyname { get { return "fieldsep"; }}
  public override int yynum { get { return 71; }}}

public class FieldExpAssign_1 : FieldExpAssign {
  public FieldExpAssign_1(Parser yyq):base(yyq, 
	((exp)(yyq.StackAt(3).m_value))
	, 
	((exp)(yyq.StackAt(0).m_value))
	 ){}}

public class FieldAssign_1 : FieldAssign {
  public FieldAssign_1(Parser yyq):base(yyq, 
	((NAME)(yyq.StackAt(2).m_value))
	, 
	((exp)(yyq.StackAt(0).m_value))
	 ){}}

public class field_1 : field {
  public field_1(Parser yyq):base(yyq, 
	((exp)(yyq.StackAt(0).m_value))
	 ){}}

public class exp_1 : exp {
  public exp_1(Parser yyq):base(yyq, 
	((NIL)(yyq.StackAt(0).m_value))
	 ){}}

public class exp_2 : exp {
  public exp_2(Parser yyq):base(yyq, 
	((FALSE)(yyq.StackAt(0).m_value))
	 ){}}

public class exp_3 : exp {
  public exp_3(Parser yyq):base(yyq, 
	((TRUE)(yyq.StackAt(0).m_value))
	 ){}}

public class exp_4 : exp {
  public exp_4(Parser yyq):base(yyq, 
	((NUMBER)(yyq.StackAt(0).m_value))
	 ){}}

public class exp_5 : exp {
  public exp_5(Parser yyq):base(yyq, 
	((LITERAL)(yyq.StackAt(0).m_value))
	 ){}}

public class exp_6 : exp {
  public exp_6(Parser yyq):base(yyq, 
	((prefixexp)(yyq.StackAt(0).m_value))
	 ){}}

public class explist_1 : explist {
  public explist_1(Parser yyq):base(yyq, 
	((exp)(yyq.StackAt(2).m_value))
	,
	((explist)(yyq.StackAt(0).m_value))
	 ){}}

public class explist_2 : explist {
  public explist_2(Parser yyq):base(yyq, 
	((exp)(yyq.StackAt(0).m_value))
	 ){}}

public class functioncall_1 : functioncall {
  public functioncall_1(Parser yyq):base(yyq, 
	((prefixexp)(yyq.StackAt(1).m_value))
	, 
	((arg)(yyq.StackAt(0).m_value))
	 ){}}

public class functioncall_2 : functioncall {
  public functioncall_2(Parser yyq):base(yyq, 
	((prefixexp)(yyq.StackAt(3).m_value))
	, 
	((arg)(yyq.StackAt(0).m_value))
	 ){}}

public class prefixexp_1 : prefixexp {
  public prefixexp_1(Parser yyq):base(yyq, 
	((var)(yyq.StackAt(0).m_value))
	 ){}}

public class prefixexp_2 : prefixexp {
  public prefixexp_2(Parser yyq):base(yyq, 
	((functioncall)(yyq.StackAt(0).m_value))
	 ){}}

public class prefixexp_3 : prefixexp {
  public prefixexp_3(Parser yyq):base(yyq, 
	((exp)(yyq.StackAt(1).m_value))
	 ){}}

public class arg_1 : arg {
  public arg_1(Parser yyq):base(yyq, 
	((explist)(yyq.StackAt(1).m_value))
	 ){}}

public class arg_2 : arg {
  public arg_2(Parser yyq):base(yyq, 
	((tableconstructor)(yyq.StackAt(0).m_value))
	 ){}}

public class tableconstructor_1 : tableconstructor {
  public tableconstructor_1(Parser yyq):base(yyq, null, 
	((LBRACE)(yyq.StackAt(1).m_value))
	, 
	((RBRACE)(yyq.StackAt(0).m_value))
	 ){}}

public class tableconstructor_2 : tableconstructor {
  public tableconstructor_2(Parser yyq):base(yyq, 
	((fieldlist)(yyq.StackAt(1).m_value))
	, 
	((LBRACE)(yyq.StackAt(2).m_value))
	, 
	((RBRACE)(yyq.StackAt(0).m_value))
	 ){}}
public class unop : SYMBOL {
	public unop(Parser yyq):base(yyq) { }
  public override string yyname { get { return "unop"; }}
  public override int yynum { get { return 84; }}}
public class binop : SYMBOL {
	public binop(Parser yyq):base(yyq) { }
  public override string yyname { get { return "binop"; }}
  public override int yynum { get { return 83; }}}
public class yysyntax: YyParser {
  public override object Action(Parser yyq,SYMBOL yysym, int yyact) {
    switch(yyact) {
	 case -1: break; //// keep compiler happy
}  return null; }

public class exp_7 : exp {
  public exp_7(Parser yyq):base(yyq){}}

public class fieldsep_1 : fieldsep {
  public fieldsep_1(Parser yyq):base(yyq){}}

public class fieldsep_2 : fieldsep {
  public fieldsep_2(Parser yyq):base(yyq){}}

public class arg_3 : arg {
  public arg_3(Parser yyq):base(yyq){}}

public class exp_8 : exp {
  public exp_8(Parser yyq):base(yyq){}}

public class arg_4 : arg {
  public arg_4(Parser yyq):base(yyq){}}

public class binop_1 : binop {
  public binop_1(Parser yyq):base(yyq){}}

public class binop_2 : binop {
  public binop_2(Parser yyq):base(yyq){}}

public class binop_3 : binop {
  public binop_3(Parser yyq):base(yyq){}}

public class binop_4 : binop {
  public binop_4(Parser yyq):base(yyq){}}

public class binop_5 : binop {
  public binop_5(Parser yyq):base(yyq){}}

public class binop_6 : binop {
  public binop_6(Parser yyq):base(yyq){}}

public class binop_7 : binop {
  public binop_7(Parser yyq):base(yyq){}}

public class binop_8 : binop {
  public binop_8(Parser yyq):base(yyq){}}

public class binop_9 : binop {
  public binop_9(Parser yyq):base(yyq){}}

public class binop_10 : binop {
  public binop_10(Parser yyq):base(yyq){}}

public class binop_11 : binop {
  public binop_11(Parser yyq):base(yyq){}}

public class binop_12 : binop {
  public binop_12(Parser yyq):base(yyq){}}

public class binop_13 : binop {
  public binop_13(Parser yyq):base(yyq){}}

public class binop_14 : binop {
  public binop_14(Parser yyq):base(yyq){}}

public class binop_15 : binop {
  public binop_15(Parser yyq):base(yyq){}}

public class unop_1 : unop {
  public unop_1(Parser yyq):base(yyq){}}

public class unop_2 : unop {
  public unop_2(Parser yyq):base(yyq){}}

public class unop_3 : unop {
  public unop_3(Parser yyq):base(yyq){}}
public yysyntax():base() { arr = new int[] { 
101,4,6,52,0,
46,0,53,0,102,
20,103,4,6,118,
0,97,0,114,0,
1,63,1,2,104,
18,1,348,102,2,
0,105,5,74,1,
105,106,18,1,105,
107,20,108,4,6,
101,0,120,0,112,
0,1,61,1,2,
2,0,1,313,109,
18,1,313,107,2,
0,1,96,110,18,
1,96,111,20,112,
4,12,65,0,83,
0,83,0,73,0,
71,0,78,0,1,
33,1,1,2,0,
1,95,113,18,1,
95,114,20,115,4,
8,78,0,65,0,
77,0,69,0,1,
3,1,1,2,0,
1,305,116,18,1,
305,117,20,118,4,
12,82,0,66,0,
82,0,65,0,67,
0,75,0,1,13,
1,1,2,0,1,
196,119,18,1,196,
120,20,121,4,16,
102,0,105,0,101,
0,108,0,100,0,
115,0,101,0,112,
0,1,71,1,2,
2,0,1,195,122,
18,1,195,123,20,
124,4,10,67,0,
79,0,77,0,77,
0,65,0,1,7,
1,1,2,0,1,
194,125,18,1,194,
126,20,127,4,18,
83,0,69,0,77,
0,73,0,67,0,
79,0,76,0,79,
0,78,0,1,9,
1,1,2,0,1,
193,128,18,1,193,
129,20,130,4,10,
102,0,105,0,101,
0,108,0,100,0,
1,54,1,2,2,
0,1,279,131,18,
1,279,132,20,133,
4,12,76,0,66,
0,82,0,65,0,
67,0,75,0,1,
12,1,1,2,0,
1,288,134,18,1,
288,107,2,0,1,
73,135,18,1,73,
107,2,0,1,72,
136,18,1,72,114,
2,0,1,71,137,
18,1,71,138,20,
139,4,6,78,0,
73,0,76,0,1,
44,1,1,2,0,
1,70,140,18,1,
70,141,20,142,4,
10,70,0,65,0,
76,0,83,0,69,
0,1,51,1,1,
2,0,1,69,143,
18,1,69,144,20,
145,4,8,84,0,
82,0,85,0,69,
0,1,50,1,1,
2,0,1,68,146,
18,1,68,147,20,
148,4,12,78,0,
85,0,77,0,66,
0,69,0,82,0,
1,5,1,1,2,
0,1,67,149,18,
1,67,150,20,151,
4,14,76,0,73,
0,84,0,69,0,
82,0,65,0,76,
0,1,4,1,1,
2,0,1,253,152,
18,1,253,153,20,
154,4,14,101,0,
120,0,112,0,108,
0,105,0,115,0,
116,0,1,62,1,
2,2,0,1,223,
155,18,1,223,156,
20,157,4,12,82,
0,80,0,65,0,
82,0,69,0,78,
0,1,11,1,1,
2,0,1,278,158,
18,1,278,114,2,
0,1,277,159,18,
1,277,160,20,161,
4,6,68,0,79,
0,84,0,1,16,
1,1,2,0,1,
276,162,18,1,276,
163,20,164,4,6,
97,0,114,0,103,
0,1,66,1,2,
2,0,1,275,165,
18,1,275,163,2,
0,1,164,166,18,
1,164,107,2,0,
1,270,167,18,1,
270,114,2,0,1,
269,168,18,1,269,
169,20,170,4,10,
67,0,79,0,76,
0,79,0,78,0,
1,8,1,1,2,
0,1,350,171,18,
1,350,172,20,173,
4,18,112,0,114,
0,101,0,102,0,
105,0,120,0,101,
0,120,0,112,0,
1,60,1,2,2,
0,1,348,104,1,
228,174,18,1,228,
107,2,0,1,49,
175,18,1,49,107,
2,0,1,155,176,
18,1,155,111,2,
0,1,154,177,18,
1,154,117,2,0,
1,217,178,18,1,
217,179,20,180,4,
12,76,0,80,0,
65,0,82,0,69,
0,78,0,1,10,
1,1,2,0,1,
137,181,18,1,137,
107,2,0,1,41,
182,18,1,41,183,
20,184,4,8,117,
0,110,0,111,0,
112,0,1,84,1,
2,2,0,1,349,
185,18,1,349,186,
23,187,4,6,69,
0,79,0,70,0,
1,2,1,6,2,
0,1,244,188,18,
1,244,123,2,0,
1,36,189,18,1,
36,190,20,191,4,
12,82,0,66,0,
82,0,65,0,67,
0,69,0,1,15,
1,1,2,0,1,
35,192,18,1,35,
190,2,0,1,34,
193,18,1,34,194,
20,195,4,18,102,
0,105,0,101,0,
108,0,100,0,108,
0,105,0,115,0,
116,0,1,57,1,
2,2,0,1,128,
196,18,1,128,132,
2,0,1,222,197,
18,1,222,156,2,
0,1,30,198,18,
1,30,199,20,200,
4,12,76,0,66,
0,82,0,65,0,
67,0,69,0,1,
14,1,1,2,0,
1,29,201,18,1,
29,172,2,0,1,
28,202,18,1,28,
102,2,0,1,27,
203,18,1,27,204,
20,205,4,24,102,
0,117,0,110,0,
99,0,116,0,105,
0,111,0,110,0,
99,0,97,0,108,
0,108,0,1,59,
1,2,2,0,1,
216,206,18,1,216,
207,20,208,4,32,
116,0,97,0,98,
0,108,0,101,0,
99,0,111,0,110,
0,115,0,116,0,
114,0,117,0,99,
0,116,0,111,0,
114,0,1,58,1,
2,2,0,1,215,
209,18,1,215,150,
2,0,1,214,210,
18,1,214,194,2,
0,1,221,211,18,
1,221,153,2,0,
1,22,212,18,1,
22,213,20,214,4,
10,98,0,105,0,
110,0,111,0,112,
0,1,83,1,2,
2,0,1,21,215,
18,1,21,156,2,
0,1,20,216,18,
1,20,217,20,218,
4,8,80,0,76,
0,85,0,83,0,
1,17,1,1,2,
0,1,19,219,18,
1,19,220,20,221,
4,10,77,0,73,
0,78,0,85,0,
83,0,1,18,1,
1,2,0,1,18,
222,18,1,18,223,
20,224,4,8,77,
0,85,0,76,0,
84,0,1,19,1,
1,2,0,1,17,
225,18,1,17,226,
20,227,4,6,77,
0,79,0,68,0,
1,21,1,1,2,
0,1,16,228,18,
1,16,229,20,230,
4,12,68,0,73,
0,86,0,73,0,
68,0,69,0,1,
22,1,1,2,0,
1,15,231,18,1,
15,232,20,233,4,
6,69,0,88,0,
80,0,1,23,1,
1,2,0,1,14,
234,18,1,14,235,
20,236,4,12,67,
0,79,0,78,0,
67,0,65,0,84,
0,1,52,1,1,
2,0,1,13,237,
18,1,13,238,20,
239,4,4,76,0,
84,0,1,26,1,
1,2,0,1,12,
240,18,1,12,241,
20,242,4,4,71,
0,84,0,1,28,
1,1,2,0,1,
11,243,18,1,11,
244,20,245,4,4,
71,0,69,0,1,
29,1,1,2,0,
1,10,246,18,1,
10,247,20,248,4,
4,76,0,69,0,
1,27,1,1,2,
0,1,9,249,18,
1,9,250,20,251,
4,4,69,0,81,
0,1,24,1,1,
2,0,1,8,252,
18,1,8,253,20,
254,4,6,65,0,
78,0,68,0,1,
30,1,1,2,0,
1,7,255,18,1,
7,256,20,257,4,
4,79,0,82,0,
1,31,1,1,2,
0,1,6,258,18,
1,6,259,20,260,
4,6,78,0,69,
0,81,0,1,25,
1,1,2,0,1,
5,261,18,1,5,
107,2,0,1,4,
262,18,1,4,220,
2,0,1,3,263,
18,1,3,264,20,
265,4,6,78,0,
79,0,84,0,1,
32,1,1,2,0,
1,2,266,18,1,
2,267,20,268,4,
10,80,0,79,0,
85,0,78,0,68,
0,1,20,1,1,
2,0,1,1,269,
18,1,1,179,2,
0,1,0,270,18,
1,0,0,2,0,
271,5,0,272,5,
101,1,119,273,19,
274,4,12,117,0,
110,0,111,0,112,
0,95,0,51,0,
1,119,275,5,11,
1,22,276,16,0,
182,1,41,277,16,
0,182,1,155,278,
16,0,182,1,244,
279,16,0,182,1,
128,280,16,0,182,
1,196,281,16,0,
182,1,217,282,16,
0,182,1,30,283,
16,0,182,1,96,
284,16,0,182,1,
279,285,16,0,182,
1,1,286,16,0,
182,1,118,287,19,
288,4,12,117,0,
110,0,111,0,112,
0,95,0,50,0,
1,118,275,1,117,
289,19,290,4,12,
117,0,110,0,111,
0,112,0,95,0,
49,0,1,117,275,
1,116,291,19,292,
4,16,98,0,105,
0,110,0,111,0,
112,0,95,0,49,
0,53,0,1,116,
293,5,9,1,137,
294,16,0,212,1,
228,295,16,0,212,
1,313,296,16,0,
212,1,105,297,16,
0,212,1,288,298,
16,0,212,1,164,
299,16,0,212,1,
5,300,16,0,212,
1,73,301,16,0,
212,1,49,302,16,
0,212,1,115,303,
19,304,4,16,98,
0,105,0,110,0,
111,0,112,0,95,
0,49,0,52,0,
1,115,293,1,114,
305,19,306,4,16,
98,0,105,0,110,
0,111,0,112,0,
95,0,49,0,51,
0,1,114,293,1,
113,307,19,308,4,
16,98,0,105,0,
110,0,111,0,112,
0,95,0,49,0,
50,0,1,113,293,
1,112,309,19,310,
4,16,98,0,105,
0,110,0,111,0,
112,0,95,0,49,
0,49,0,1,112,
293,1,111,311,19,
312,4,16,98,0,
105,0,110,0,111,
0,112,0,95,0,
49,0,48,0,1,
111,293,1,110,313,
19,314,4,14,98,
0,105,0,110,0,
111,0,112,0,95,
0,57,0,1,110,
293,1,109,315,19,
316,4,14,98,0,
105,0,110,0,111,
0,112,0,95,0,
56,0,1,109,293,
1,108,317,19,318,
4,14,98,0,105,
0,110,0,111,0,
112,0,95,0,55,
0,1,108,293,1,
107,319,19,320,4,
14,98,0,105,0,
110,0,111,0,112,
0,95,0,54,0,
1,107,293,1,106,
321,19,322,4,14,
98,0,105,0,110,
0,111,0,112,0,
95,0,53,0,1,
106,293,1,105,323,
19,324,4,14,98,
0,105,0,110,0,
111,0,112,0,95,
0,52,0,1,105,
293,1,104,325,19,
326,4,14,98,0,
105,0,110,0,111,
0,112,0,95,0,
51,0,1,104,293,
1,103,327,19,328,
4,14,98,0,105,
0,110,0,111,0,
112,0,95,0,50,
0,1,103,293,1,
102,329,19,330,4,
14,98,0,105,0,
110,0,111,0,112,
0,95,0,49,0,
1,102,293,1,101,
331,19,332,4,10,
97,0,114,0,103,
0,95,0,52,0,
1,101,333,5,3,
1,350,334,16,0,
162,1,29,335,16,
0,162,1,270,336,
16,0,165,1,100,
337,19,338,4,10,
101,0,120,0,112,
0,95,0,56,0,
1,100,339,5,11,
1,22,340,16,0,
109,1,41,341,16,
0,175,1,155,342,
16,0,166,1,244,
343,16,0,174,1,
128,344,16,0,181,
1,196,345,16,0,
135,1,217,346,16,
0,174,1,30,347,
16,0,135,1,96,
348,16,0,106,1,
279,349,16,0,134,
1,1,350,16,0,
261,1,99,351,19,
352,4,10,97,0,
114,0,103,0,95,
0,51,0,1,99,
333,1,98,353,19,
354,4,20,102,0,
105,0,101,0,108,
0,100,0,115,0,
101,0,112,0,95,
0,50,0,1,98,
355,5,1,1,193,
356,16,0,119,1,
97,357,19,358,4,
20,102,0,105,0,
101,0,108,0,100,
0,115,0,101,0,
112,0,95,0,49,
0,1,97,355,1,
96,359,19,360,4,
10,101,0,120,0,
112,0,95,0,55,
0,1,96,339,1,
95,361,19,362,4,
36,116,0,97,0,
98,0,108,0,101,
0,99,0,111,0,
110,0,115,0,116,
0,114,0,117,0,
99,0,116,0,111,
0,114,0,95,0,
50,0,1,95,363,
5,3,1,350,364,
16,0,206,1,29,
365,16,0,206,1,
270,366,16,0,206,
1,94,367,19,368,
4,36,116,0,97,
0,98,0,108,0,
101,0,99,0,111,
0,110,0,115,0,
116,0,114,0,117,
0,99,0,116,0,
111,0,114,0,95,
0,49,0,1,94,
363,1,93,369,19,
370,4,10,97,0,
114,0,103,0,95,
0,50,0,1,93,
333,1,92,371,19,
372,4,10,97,0,
114,0,103,0,95,
0,49,0,1,92,
333,1,91,373,19,
374,4,22,112,0,
114,0,101,0,102,
0,105,0,120,0,
101,0,120,0,112,
0,95,0,51,0,
1,91,375,5,12,
1,22,376,16,0,
201,1,41,377,16,
0,201,1,155,378,
16,0,201,1,244,
379,16,0,201,1,
128,380,16,0,201,
1,196,381,16,0,
201,1,217,382,16,
0,201,1,30,383,
16,0,201,1,96,
384,16,0,201,1,
279,385,16,0,201,
1,1,386,16,0,
201,1,0,387,16,
0,171,1,90,388,
19,389,4,22,112,
0,114,0,101,0,
102,0,105,0,120,
0,101,0,120,0,
112,0,95,0,50,
0,1,90,375,1,
89,390,19,391,4,
22,112,0,114,0,
101,0,102,0,105,
0,120,0,101,0,
120,0,112,0,95,
0,49,0,1,89,
375,1,88,392,19,
393,4,28,102,0,
117,0,110,0,99,
0,116,0,105,0,
111,0,110,0,99,
0,97,0,108,0,
108,0,95,0,50,
0,1,88,394,5,
12,1,22,395,16,
0,203,1,41,396,
16,0,203,1,155,
397,16,0,203,1,
244,398,16,0,203,
1,128,399,16,0,
203,1,196,400,16,
0,203,1,217,401,
16,0,203,1,30,
402,16,0,203,1,
96,403,16,0,203,
1,279,404,16,0,
203,1,1,405,16,
0,203,1,0,406,
16,0,203,1,87,
407,19,408,4,28,
102,0,117,0,110,
0,99,0,116,0,
105,0,111,0,110,
0,99,0,97,0,
108,0,108,0,95,
0,49,0,1,87,
394,1,86,409,19,
410,4,18,101,0,
120,0,112,0,108,
0,105,0,115,0,
116,0,95,0,50,
0,1,86,411,5,
2,1,217,412,16,
0,211,1,244,413,
16,0,152,1,85,
414,19,415,4,18,
101,0,120,0,112,
0,108,0,105,0,
115,0,116,0,95,
0,49,0,1,85,
411,1,84,416,19,
184,1,84,275,1,
83,417,19,214,1,
83,293,1,82,418,
19,419,4,10,101,
0,120,0,112,0,
95,0,54,0,1,
82,339,1,81,420,
19,421,4,10,101,
0,120,0,112,0,
95,0,53,0,1,
81,339,1,80,422,
19,423,4,10,101,
0,120,0,112,0,
95,0,52,0,1,
80,339,1,79,424,
19,425,4,10,101,
0,120,0,112,0,
95,0,51,0,1,
79,339,1,78,426,
19,427,4,10,101,
0,120,0,112,0,
95,0,50,0,1,
78,339,1,77,428,
19,429,4,10,101,
0,120,0,112,0,
95,0,49,0,1,
77,339,1,76,430,
19,431,4,14,102,
0,105,0,101,0,
108,0,100,0,95,
0,49,0,1,76,
432,5,2,1,196,
433,16,0,128,1,
30,434,16,0,128,
1,75,435,19,436,
4,26,70,0,105,
0,101,0,108,0,
100,0,65,0,115,
0,115,0,105,0,
103,0,110,0,95,
0,49,0,1,75,
432,1,74,437,19,
438,4,32,70,0,
105,0,101,0,108,
0,100,0,69,0,
120,0,112,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,95,0,49,0,
1,74,432,1,73,
439,19,440,4,22,
102,0,105,0,101,
0,108,0,100,0,
108,0,105,0,115,
0,116,0,95,0,
51,0,1,73,441,
5,2,1,196,442,
16,0,210,1,30,
443,16,0,193,1,
72,444,19,445,4,
22,102,0,105,0,
101,0,108,0,100,
0,108,0,105,0,
115,0,116,0,95,
0,50,0,1,72,
441,1,71,446,19,
121,1,71,355,1,
70,447,19,448,4,
22,102,0,105,0,
101,0,108,0,100,
0,108,0,105,0,
115,0,116,0,95,
0,49,0,1,70,
441,1,69,449,19,
450,4,24,80,0,
97,0,99,0,107,
0,97,0,103,0,
101,0,82,0,101,
0,102,0,95,0,
49,0,1,69,451,
5,12,1,22,452,
16,0,202,1,41,
453,16,0,202,1,
155,454,16,0,202,
1,244,455,16,0,
202,1,128,456,16,
0,202,1,196,457,
16,0,202,1,217,
458,16,0,202,1,
30,459,16,0,202,
1,96,460,16,0,
202,1,279,461,16,
0,202,1,1,462,
16,0,202,1,0,
463,16,0,104,1,
68,464,19,465,4,
20,84,0,97,0,
98,0,108,0,101,
0,82,0,101,0,
102,0,95,0,49,
0,1,68,451,1,
67,466,19,467,4,
10,118,0,97,0,
114,0,95,0,49,
0,1,67,451,1,
66,468,19,164,1,
66,333,1,65,469,
19,470,4,16,84,
0,97,0,98,0,
108,0,101,0,82,
0,101,0,102,0,
1,65,451,1,64,
471,19,472,4,20,
80,0,97,0,99,
0,107,0,97,0,
103,0,101,0,82,
0,101,0,102,0,
1,64,451,1,63,
473,19,103,1,63,
451,1,62,474,19,
154,1,62,411,1,
61,475,19,108,1,
61,339,1,60,476,
19,173,1,60,375,
1,59,477,19,205,
1,59,394,1,58,
478,19,208,1,58,
363,1,57,479,19,
195,1,57,441,1,
56,480,19,481,4,
22,70,0,105,0,
101,0,108,0,100,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,1,56,
432,1,55,482,19,
483,4,28,70,0,
105,0,101,0,108,
0,100,0,69,0,
120,0,112,0,65,
0,115,0,115,0,
105,0,103,0,110,
0,1,55,432,1,
54,484,19,130,1,
54,432,1,52,485,
19,236,1,52,486,
5,31,1,216,487,
17,488,15,489,4,
8,37,0,97,0,
114,0,103,0,1,
-1,1,5,490,20,
370,1,93,1,3,
1,2,1,1,491,
22,1,29,1,278,
492,17,493,15,494,
4,22,37,0,80,
0,97,0,99,0,
107,0,97,0,103,
0,101,0,82,0,
101,0,102,0,1,
-1,1,5,495,20,
450,1,69,1,3,
1,4,1,3,496,
22,1,3,1,222,
497,17,498,15,489,
1,-1,1,5,499,
20,372,1,92,1,
3,1,4,1,3,
500,22,1,28,1,
276,501,17,502,15,
503,4,26,37,0,
102,0,117,0,110,
0,99,0,116,0,
105,0,111,0,110,
0,99,0,97,0,
108,0,108,0,1,
-1,1,5,504,20,
408,1,87,1,3,
1,3,1,2,505,
22,1,22,1,275,
506,17,507,15,503,
1,-1,1,5,508,
20,393,1,88,1,
3,1,5,1,4,
509,22,1,23,1,
35,510,17,511,15,
512,4,34,37,0,
116,0,97,0,98,
0,108,0,101,0,
99,0,111,0,110,
0,115,0,116,0,
114,0,117,0,99,
0,116,0,111,0,
114,0,1,-1,1,
5,513,20,362,1,
95,1,3,1,4,
1,3,514,22,1,
32,1,36,515,17,
516,15,512,1,-1,
1,5,517,20,368,
1,94,1,3,1,
3,1,2,518,22,
1,31,1,223,519,
17,520,15,489,1,
-1,1,5,163,1,
2,1,2,521,22,
1,27,1,305,522,
17,523,15,524,4,
18,37,0,84,0,
97,0,98,0,108,
0,101,0,82,0,
101,0,102,0,1,
-1,1,5,525,20,
465,1,68,1,3,
1,5,1,4,526,
22,1,2,1,21,
527,17,528,15,529,
4,20,37,0,112,
0,114,0,101,0,
102,0,105,0,120,
0,101,0,120,0,
112,0,1,-1,1,
5,530,20,374,1,
91,1,3,1,4,
1,3,531,22,1,
26,1,313,532,16,
0,234,1,164,533,
16,0,234,1,29,
534,17,535,15,536,
4,8,37,0,101,
0,120,0,112,0,
1,-1,1,5,537,
20,419,1,82,1,
3,1,2,1,1,
538,22,1,17,1,
28,539,17,540,15,
529,1,-1,1,5,
541,20,391,1,89,
1,3,1,2,1,
1,542,22,1,24,
1,27,543,17,544,
15,529,1,-1,1,
5,545,20,389,1,
90,1,3,1,2,
1,1,546,22,1,
25,1,73,547,16,
0,234,1,72,548,
17,549,15,550,4,
8,37,0,118,0,
97,0,114,0,1,
-1,1,5,551,20,
467,1,67,1,3,
1,2,1,1,552,
22,1,1,1,71,
553,17,554,15,536,
1,-1,1,5,555,
20,429,1,77,1,
3,1,2,1,1,
556,22,1,12,1,
70,557,17,558,15,
536,1,-1,1,5,
559,20,427,1,78,
1,3,1,2,1,
1,560,22,1,13,
1,69,561,17,562,
15,536,1,-1,1,
5,563,20,425,1,
79,1,3,1,2,
1,1,564,22,1,
14,1,68,565,17,
566,15,536,1,-1,
1,5,567,20,423,
1,80,1,3,1,
2,1,1,568,22,
1,15,1,67,569,
17,570,15,536,1,
-1,1,5,571,20,
421,1,81,1,3,
1,2,1,1,572,
22,1,16,1,348,
573,17,540,1,1,
542,1,105,574,16,
0,234,1,137,575,
16,0,234,1,5,
576,16,0,234,1,
288,577,16,0,234,
1,49,578,16,0,
234,1,215,579,17,
580,15,489,1,-1,
1,5,163,1,1,
1,1,581,22,1,
30,1,228,582,16,
0,234,1,95,583,
17,549,1,1,552,
1,51,584,19,142,
1,51,585,5,31,
1,279,586,16,0,
140,1,41,587,16,
0,140,1,128,588,
16,0,140,1,2,
589,17,590,15,591,
4,10,37,0,117,
0,110,0,111,0,
112,0,1,-1,1,
5,183,1,1,1,
1,592,22,1,35,
1,30,593,16,0,
140,1,217,594,16,
0,140,1,6,595,
17,596,15,597,4,
12,37,0,98,0,
105,0,110,0,111,
0,112,0,1,-1,
1,5,213,1,1,
1,1,598,22,1,
50,1,8,599,17,
600,15,597,1,-1,
1,5,213,1,1,
1,1,601,22,1,
48,1,14,602,17,
603,15,597,1,-1,
1,5,213,1,1,
1,1,604,22,1,
42,1,7,605,17,
606,15,597,1,-1,
1,5,213,1,1,
1,1,607,22,1,
49,1,22,608,16,
0,140,1,9,609,
17,610,15,597,1,
-1,1,5,213,1,
1,1,1,611,22,
1,47,1,20,612,
17,613,15,597,1,
-1,1,5,213,1,
1,1,1,614,22,
1,36,1,19,615,
17,616,15,597,1,
-1,1,5,213,1,
1,1,1,617,22,
1,37,1,18,618,
17,619,15,597,1,
-1,1,5,213,1,
1,1,1,620,22,
1,38,1,17,621,
17,622,15,597,1,
-1,1,5,213,1,
1,1,1,623,22,
1,39,1,16,624,
17,625,15,597,1,
-1,1,5,213,1,
1,1,1,626,22,
1,40,1,15,627,
17,628,15,597,1,
-1,1,5,213,1,
1,1,1,629,22,
1,41,1,155,630,
16,0,140,1,13,
631,17,632,15,597,
1,-1,1,5,213,
1,1,1,1,633,
22,1,43,1,12,
634,17,635,15,597,
1,-1,1,5,213,
1,1,1,1,636,
22,1,44,1,11,
637,17,638,15,597,
1,-1,1,5,213,
1,1,1,1,639,
22,1,45,1,10,
640,17,641,15,597,
1,-1,1,5,213,
1,1,1,1,642,
22,1,46,1,244,
643,16,0,140,1,
196,644,16,0,140,
1,195,645,17,646,
15,647,4,18,37,
0,102,0,105,0,
101,0,108,0,100,
0,115,0,101,0,
112,0,1,-1,1,
5,120,1,1,1,
1,648,22,1,7,
1,194,649,17,650,
15,647,1,-1,1,
5,120,1,1,1,
1,651,22,1,8,
1,4,652,17,653,
15,591,1,-1,1,
5,183,1,1,1,
1,654,22,1,33,
1,3,655,17,656,
15,591,1,-1,1,
5,183,1,1,1,
1,657,22,1,34,
1,96,658,16,0,
140,1,1,659,16,
0,140,1,50,660,
19,145,1,50,661,
5,31,1,279,662,
16,0,143,1,41,
663,16,0,143,1,
128,664,16,0,143,
1,2,589,1,30,
665,16,0,143,1,
217,666,16,0,143,
1,6,595,1,8,
599,1,14,602,1,
7,605,1,22,667,
16,0,143,1,9,
609,1,20,612,1,
19,615,1,18,618,
1,17,621,1,16,
624,1,15,627,1,
155,668,16,0,143,
1,13,631,1,12,
634,1,11,637,1,
10,640,1,244,669,
16,0,143,1,196,
670,16,0,143,1,
195,645,1,194,649,
1,4,652,1,3,
655,1,96,671,16,
0,143,1,1,672,
16,0,143,1,44,
673,19,139,1,44,
674,5,31,1,279,
675,16,0,137,1,
41,676,16,0,137,
1,128,677,16,0,
137,1,2,589,1,
30,678,16,0,137,
1,217,679,16,0,
137,1,6,595,1,
8,599,1,14,602,
1,7,605,1,22,
680,16,0,137,1,
9,609,1,20,612,
1,19,615,1,18,
618,1,17,621,1,
16,624,1,15,627,
1,155,681,16,0,
137,1,13,631,1,
12,634,1,11,637,
1,10,640,1,244,
682,16,0,137,1,
196,683,16,0,137,
1,195,645,1,194,
649,1,4,652,1,
3,655,1,96,684,
16,0,137,1,1,
685,16,0,137,1,
33,686,19,112,1,
33,687,5,2,1,
95,688,16,0,110,
1,154,689,16,0,
176,1,32,690,19,
265,1,32,691,5,
31,1,279,692,16,
0,263,1,41,693,
16,0,263,1,128,
694,16,0,263,1,
2,589,1,30,695,
16,0,263,1,217,
696,16,0,263,1,
6,595,1,8,599,
1,14,602,1,7,
605,1,22,697,16,
0,263,1,9,609,
1,20,612,1,19,
615,1,18,618,1,
17,621,1,16,624,
1,15,627,1,155,
698,16,0,263,1,
13,631,1,12,634,
1,11,637,1,10,
640,1,244,699,16,
0,263,1,196,700,
16,0,263,1,195,
645,1,194,649,1,
4,652,1,3,655,
1,96,701,16,0,
263,1,1,702,16,
0,263,1,31,703,
19,257,1,31,704,
5,31,1,216,487,
1,278,492,1,222,
497,1,276,501,1,
275,506,1,35,510,
1,36,515,1,223,
519,1,305,522,1,
21,527,1,313,705,
16,0,255,1,164,
706,16,0,255,1,
29,534,1,28,539,
1,27,543,1,73,
707,16,0,255,1,
72,548,1,71,553,
1,70,557,1,69,
561,1,68,565,1,
67,569,1,348,573,
1,105,708,16,0,
255,1,137,709,16,
0,255,1,5,710,
16,0,255,1,288,
711,16,0,255,1,
49,712,16,0,255,
1,215,579,1,228,
713,16,0,255,1,
95,583,1,30,714,
19,254,1,30,715,
5,31,1,216,487,
1,278,492,1,222,
497,1,276,501,1,
275,506,1,35,510,
1,36,515,1,223,
519,1,305,522,1,
21,527,1,313,716,
16,0,252,1,164,
717,16,0,252,1,
29,534,1,28,539,
1,27,543,1,73,
718,16,0,252,1,
72,548,1,71,553,
1,70,557,1,69,
561,1,68,565,1,
67,569,1,348,573,
1,105,719,16,0,
252,1,137,720,16,
0,252,1,5,721,
16,0,252,1,288,
722,16,0,252,1,
49,723,16,0,252,
1,215,579,1,228,
724,16,0,252,1,
95,583,1,29,725,
19,245,1,29,726,
5,31,1,216,487,
1,278,492,1,222,
497,1,276,501,1,
275,506,1,35,510,
1,36,515,1,223,
519,1,305,522,1,
21,527,1,313,727,
16,0,243,1,164,
728,16,0,243,1,
29,534,1,28,539,
1,27,543,1,73,
729,16,0,243,1,
72,548,1,71,553,
1,70,557,1,69,
561,1,68,565,1,
67,569,1,348,573,
1,105,730,16,0,
243,1,137,731,16,
0,243,1,5,732,
16,0,243,1,288,
733,16,0,243,1,
49,734,16,0,243,
1,215,579,1,228,
735,16,0,243,1,
95,583,1,28,736,
19,242,1,28,737,
5,31,1,216,487,
1,278,492,1,222,
497,1,276,501,1,
275,506,1,35,510,
1,36,515,1,223,
519,1,305,522,1,
21,527,1,313,738,
16,0,240,1,164,
739,16,0,240,1,
29,534,1,28,539,
1,27,543,1,73,
740,16,0,240,1,
72,548,1,71,553,
1,70,557,1,69,
561,1,68,565,1,
67,569,1,348,573,
1,105,741,16,0,
240,1,137,742,16,
0,240,1,5,743,
16,0,240,1,288,
744,16,0,240,1,
49,745,16,0,240,
1,215,579,1,228,
746,16,0,240,1,
95,583,1,27,747,
19,248,1,27,748,
5,31,1,216,487,
1,278,492,1,222,
497,1,276,501,1,
275,506,1,35,510,
1,36,515,1,223,
519,1,305,522,1,
21,527,1,313,749,
16,0,246,1,164,
750,16,0,246,1,
29,534,1,28,539,
1,27,543,1,73,
751,16,0,246,1,
72,548,1,71,553,
1,70,557,1,69,
561,1,68,565,1,
67,569,1,348,573,
1,105,752,16,0,
246,1,137,753,16,
0,246,1,5,754,
16,0,246,1,288,
755,16,0,246,1,
49,756,16,0,246,
1,215,579,1,228,
757,16,0,246,1,
95,583,1,26,758,
19,239,1,26,759,
5,31,1,216,487,
1,278,492,1,222,
497,1,276,501,1,
275,506,1,35,510,
1,36,515,1,223,
519,1,305,522,1,
21,527,1,313,760,
16,0,237,1,164,
761,16,0,237,1,
29,534,1,28,539,
1,27,543,1,73,
762,16,0,237,1,
72,548,1,71,553,
1,70,557,1,69,
561,1,68,565,1,
67,569,1,348,573,
1,105,763,16,0,
237,1,137,764,16,
0,237,1,5,765,
16,0,237,1,288,
766,16,0,237,1,
49,767,16,0,237,
1,215,579,1,228,
768,16,0,237,1,
95,583,1,25,769,
19,260,1,25,770,
5,31,1,216,487,
1,278,492,1,222,
497,1,276,501,1,
275,506,1,35,510,
1,36,515,1,223,
519,1,305,522,1,
21,527,1,313,771,
16,0,258,1,164,
772,16,0,258,1,
29,534,1,28,539,
1,27,543,1,73,
773,16,0,258,1,
72,548,1,71,553,
1,70,557,1,69,
561,1,68,565,1,
67,569,1,348,573,
1,105,774,16,0,
258,1,137,775,16,
0,258,1,5,776,
16,0,258,1,288,
777,16,0,258,1,
49,778,16,0,258,
1,215,579,1,228,
779,16,0,258,1,
95,583,1,24,780,
19,251,1,24,781,
5,31,1,216,487,
1,278,492,1,222,
497,1,276,501,1,
275,506,1,35,510,
1,36,515,1,223,
519,1,305,522,1,
21,527,1,313,782,
16,0,249,1,164,
783,16,0,249,1,
29,534,1,28,539,
1,27,543,1,73,
784,16,0,249,1,
72,548,1,71,553,
1,70,557,1,69,
561,1,68,565,1,
67,569,1,348,573,
1,105,785,16,0,
249,1,137,786,16,
0,249,1,5,787,
16,0,249,1,288,
788,16,0,249,1,
49,789,16,0,249,
1,215,579,1,228,
790,16,0,249,1,
95,583,1,23,791,
19,233,1,23,792,
5,31,1,216,487,
1,278,492,1,222,
497,1,276,501,1,
275,506,1,35,510,
1,36,515,1,223,
519,1,305,522,1,
21,527,1,313,793,
16,0,231,1,164,
794,16,0,231,1,
29,534,1,28,539,
1,27,543,1,73,
795,16,0,231,1,
72,548,1,71,553,
1,70,557,1,69,
561,1,68,565,1,
67,569,1,348,573,
1,105,796,16,0,
231,1,137,797,16,
0,231,1,5,798,
16,0,231,1,288,
799,16,0,231,1,
49,800,16,0,231,
1,215,579,1,228,
801,16,0,231,1,
95,583,1,22,802,
19,230,1,22,803,
5,31,1,216,487,
1,278,492,1,222,
497,1,276,501,1,
275,506,1,35,510,
1,36,515,1,223,
519,1,305,522,1,
21,527,1,313,804,
16,0,228,1,164,
805,16,0,228,1,
29,534,1,28,539,
1,27,543,1,73,
806,16,0,228,1,
72,548,1,71,553,
1,70,557,1,69,
561,1,68,565,1,
67,569,1,348,573,
1,105,807,16,0,
228,1,137,808,16,
0,228,1,5,809,
16,0,228,1,288,
810,16,0,228,1,
49,811,16,0,228,
1,215,579,1,228,
812,16,0,228,1,
95,583,1,21,813,
19,227,1,21,814,
5,31,1,216,487,
1,278,492,1,222,
497,1,276,501,1,
275,506,1,35,510,
1,36,515,1,223,
519,1,305,522,1,
21,527,1,313,815,
16,0,225,1,164,
816,16,0,225,1,
29,534,1,28,539,
1,27,543,1,73,
817,16,0,225,1,
72,548,1,71,553,
1,70,557,1,69,
561,1,68,565,1,
67,569,1,348,573,
1,105,818,16,0,
225,1,137,819,16,
0,225,1,5,820,
16,0,225,1,288,
821,16,0,225,1,
49,822,16,0,225,
1,215,579,1,228,
823,16,0,225,1,
95,583,1,20,824,
19,268,1,20,825,
5,31,1,279,826,
16,0,266,1,41,
827,16,0,266,1,
128,828,16,0,266,
1,2,589,1,30,
829,16,0,266,1,
217,830,16,0,266,
1,6,595,1,8,
599,1,14,602,1,
7,605,1,22,831,
16,0,266,1,9,
609,1,20,612,1,
19,615,1,18,618,
1,17,621,1,16,
624,1,15,627,1,
155,832,16,0,266,
1,13,631,1,12,
634,1,11,637,1,
10,640,1,244,833,
16,0,266,1,196,
834,16,0,266,1,
195,645,1,194,649,
1,4,652,1,3,
655,1,96,835,16,
0,266,1,1,836,
16,0,266,1,19,
837,19,224,1,19,
838,5,31,1,216,
487,1,278,492,1,
222,497,1,276,501,
1,275,506,1,35,
510,1,36,515,1,
223,519,1,305,522,
1,21,527,1,313,
839,16,0,222,1,
164,840,16,0,222,
1,29,534,1,28,
539,1,27,543,1,
73,841,16,0,222,
1,72,548,1,71,
553,1,70,557,1,
69,561,1,68,565,
1,67,569,1,348,
573,1,105,842,16,
0,222,1,137,843,
16,0,222,1,5,
844,16,0,222,1,
288,845,16,0,222,
1,49,846,16,0,
222,1,215,579,1,
228,847,16,0,222,
1,95,583,1,18,
848,19,221,1,18,
849,5,62,1,105,
850,16,0,219,1,
313,851,16,0,219,
1,96,852,16,0,
262,1,95,583,1,
305,522,1,196,853,
16,0,262,1,195,
645,1,194,649,1,
288,854,16,0,219,
1,73,855,16,0,
219,1,72,548,1,
71,553,1,70,557,
1,69,561,1,68,
565,1,67,569,1,
279,856,16,0,262,
1,278,492,1,276,
501,1,275,506,1,
164,857,16,0,219,
1,49,858,16,0,
219,1,155,859,16,
0,262,1,41,860,
16,0,262,1,36,
515,1,1,861,16,
0,262,1,137,862,
16,0,219,1,35,
510,1,2,589,1,
3,655,1,30,863,
16,0,262,1,27,
543,1,244,864,16,
0,262,1,29,534,
1,28,539,1,348,
573,1,8,599,1,
9,609,1,14,602,
1,21,527,1,22,
865,16,0,262,1,
128,866,16,0,262,
1,20,612,1,19,
615,1,18,618,1,
17,621,1,16,624,
1,15,627,1,228,
867,16,0,219,1,
13,631,1,12,634,
1,11,637,1,10,
640,1,223,519,1,
222,497,1,7,605,
1,6,595,1,5,
868,16,0,219,1,
4,652,1,217,869,
16,0,262,1,216,
487,1,215,579,1,
17,870,19,218,1,
17,871,5,31,1,
216,487,1,278,492,
1,222,497,1,276,
501,1,275,506,1,
35,510,1,36,515,
1,223,519,1,305,
522,1,21,527,1,
313,872,16,0,216,
1,164,873,16,0,
216,1,29,534,1,
28,539,1,27,543,
1,73,874,16,0,
216,1,72,548,1,
71,553,1,70,557,
1,69,561,1,68,
565,1,67,569,1,
348,573,1,105,875,
16,0,216,1,137,
876,16,0,216,1,
5,877,16,0,216,
1,288,878,16,0,
216,1,49,879,16,
0,216,1,215,579,
1,228,880,16,0,
216,1,95,583,1,
16,881,19,161,1,
16,882,5,18,1,
216,487,1,278,492,
1,276,501,1,275,
506,1,36,515,1,
35,510,1,222,497,
1,21,527,1,29,
883,16,0,159,1,
28,539,1,27,543,
1,72,548,1,305,
522,1,350,884,16,
0,159,1,348,573,
1,215,579,1,223,
519,1,95,583,1,
15,885,19,191,1,
15,886,5,34,1,
105,887,17,888,15,
889,4,24,37,0,
70,0,105,0,101,
0,108,0,100,0,
65,0,115,0,115,
0,105,0,103,0,
110,0,1,-1,1,
5,890,20,436,1,
75,1,3,1,4,
1,3,891,22,1,
10,1,313,892,17,
893,15,536,1,-1,
1,5,107,1,3,
1,3,894,22,1,
18,1,95,583,1,
305,522,1,196,895,
17,896,15,897,4,
20,37,0,102,0,
105,0,101,0,108,
0,100,0,108,0,
105,0,115,0,116,
0,1,-1,1,5,
898,20,440,1,73,
1,3,1,3,1,
2,899,22,1,6,
1,195,645,1,194,
649,1,193,900,17,
901,15,897,1,-1,
1,5,902,20,448,
1,70,1,3,1,
2,1,1,903,22,
1,4,1,73,904,
17,905,15,906,4,
12,37,0,102,0,
105,0,101,0,108,
0,100,0,1,-1,
1,5,907,20,431,
1,76,1,3,1,
2,1,1,908,22,
1,11,1,72,548,
1,71,553,1,70,
557,1,69,561,1,
68,565,1,67,569,
1,278,492,1,276,
501,1,275,506,1,
164,909,17,910,15,
911,4,30,37,0,
70,0,105,0,101,
0,108,0,100,0,
69,0,120,0,112,
0,65,0,115,0,
115,0,105,0,103,
0,110,0,1,-1,
1,5,912,20,438,
1,74,1,3,1,
6,1,5,913,22,
1,9,1,49,914,
17,915,15,536,1,
-1,1,5,107,1,
2,1,2,916,22,
1,19,1,36,515,
1,35,510,1,34,
917,16,0,192,1,
29,534,1,30,918,
16,0,189,1,27,
543,1,28,539,1,
348,573,1,21,527,
1,223,519,1,222,
497,1,216,487,1,
215,579,1,214,919,
17,920,15,897,1,
-1,1,5,921,20,
445,1,72,1,3,
1,4,1,3,922,
22,1,5,1,14,
923,19,200,1,14,
924,5,19,1,270,
925,16,0,198,1,
216,487,1,278,492,
1,276,501,1,275,
506,1,36,515,1,
35,510,1,222,497,
1,21,527,1,29,
926,16,0,198,1,
28,539,1,27,543,
1,72,548,1,305,
522,1,350,927,16,
0,198,1,348,573,
1,215,579,1,223,
519,1,95,583,1,
13,928,19,118,1,
13,929,5,26,1,
216,487,1,278,492,
1,222,497,1,276,
501,1,275,506,1,
35,510,1,36,515,
1,223,519,1,305,
522,1,21,527,1,
313,892,1,29,534,
1,28,539,1,27,
543,1,72,548,1,
71,553,1,70,557,
1,69,561,1,68,
565,1,67,569,1,
348,573,1,137,930,
16,0,177,1,288,
931,16,0,116,1,
215,579,1,49,914,
1,95,583,1,12,
932,19,133,1,12,
933,5,22,1,216,
487,1,278,492,1,
276,501,1,275,506,
1,35,510,1,36,
515,1,223,519,1,
222,497,1,21,527,
1,30,934,16,0,
196,1,29,935,16,
0,131,1,28,539,
1,27,543,1,72,
548,1,305,522,1,
350,936,16,0,131,
1,348,573,1,196,
937,16,0,196,1,
195,645,1,194,649,
1,215,579,1,95,
583,1,11,938,19,
157,1,11,939,5,
29,1,216,487,1,
278,492,1,222,497,
1,276,501,1,228,
940,17,941,15,942,
4,16,37,0,101,
0,120,0,112,0,
108,0,105,0,115,
0,116,0,1,-1,
1,5,943,20,410,
1,86,1,3,1,
2,1,1,944,22,
1,21,1,35,510,
1,21,527,1,36,
515,1,223,519,1,
305,522,1,29,534,
1,313,892,1,217,
945,16,0,155,1,
28,539,1,27,543,
1,72,548,1,71,
553,1,70,557,1,
69,561,1,68,565,
1,67,569,1,348,
573,1,253,946,17,
947,15,942,1,-1,
1,5,948,20,415,
1,85,1,3,1,
4,1,3,949,22,
1,20,1,221,950,
16,0,197,1,5,
951,16,0,215,1,
215,579,1,275,506,
1,49,914,1,95,
583,1,10,952,19,
180,1,10,953,5,
51,1,96,954,16,
0,269,1,95,583,
1,305,522,1,196,
955,16,0,269,1,
195,645,1,194,649,
1,72,548,1,279,
956,16,0,269,1,
278,492,1,276,501,
1,275,506,1,270,
957,16,0,178,1,
155,958,16,0,269,
1,41,959,16,0,
269,1,128,960,16,
0,269,1,36,515,
1,35,510,1,29,
961,16,0,178,1,
30,962,16,0,269,
1,27,543,1,244,
963,16,0,269,1,
350,964,16,0,178,
1,28,539,1,348,
573,1,2,589,1,
1,965,16,0,269,
1,8,599,1,9,
609,1,22,966,16,
0,269,1,21,527,
1,20,612,1,19,
615,1,18,618,1,
17,621,1,16,624,
1,15,627,1,14,
602,1,13,631,1,
12,634,1,11,637,
1,10,640,1,223,
519,1,222,497,1,
7,605,1,6,595,
1,3,655,1,4,
652,1,217,967,16,
0,269,1,216,487,
1,215,579,1,0,
968,16,0,269,1,
9,969,19,127,1,
9,970,5,28,1,
216,487,1,278,492,
1,222,497,1,276,
501,1,275,506,1,
35,510,1,36,515,
1,223,519,1,305,
522,1,21,527,1,
313,892,1,164,909,
1,29,534,1,28,
539,1,27,543,1,
73,904,1,72,548,
1,71,553,1,70,
557,1,69,561,1,
68,565,1,67,569,
1,348,573,1,105,
887,1,193,971,16,
0,125,1,215,579,
1,49,914,1,95,
583,1,8,972,19,
170,1,8,973,5,
18,1,216,487,1,
278,492,1,276,501,
1,275,506,1,36,
515,1,35,510,1,
222,497,1,21,527,
1,29,974,16,0,
168,1,28,539,1,
27,543,1,72,548,
1,305,522,1,350,
975,16,0,168,1,
348,573,1,215,579,
1,223,519,1,95,
583,1,7,976,19,
124,1,7,977,5,
29,1,216,487,1,
278,492,1,222,497,
1,276,501,1,275,
506,1,35,510,1,
36,515,1,223,519,
1,305,522,1,21,
527,1,313,892,1,
164,909,1,29,534,
1,28,539,1,27,
543,1,73,904,1,
72,548,1,71,553,
1,70,557,1,69,
561,1,68,565,1,
67,569,1,348,573,
1,105,887,1,49,
914,1,193,978,16,
0,122,1,215,579,
1,228,979,16,0,
188,1,95,583,1,
5,980,19,148,1,
5,981,5,31,1,
279,982,16,0,146,
1,41,983,16,0,
146,1,128,984,16,
0,146,1,2,589,
1,30,985,16,0,
146,1,217,986,16,
0,146,1,6,595,
1,8,599,1,14,
602,1,7,605,1,
22,987,16,0,146,
1,9,609,1,20,
612,1,19,615,1,
18,618,1,17,621,
1,16,624,1,15,
627,1,155,988,16,
0,146,1,13,631,
1,12,634,1,11,
637,1,10,640,1,
244,989,16,0,146,
1,196,990,16,0,
146,1,195,645,1,
194,649,1,4,652,
1,3,655,1,96,
991,16,0,146,1,
1,992,16,0,146,
1,4,993,19,151,
1,4,994,5,50,
1,96,995,16,0,
149,1,95,583,1,
305,522,1,196,996,
16,0,149,1,195,
645,1,194,649,1,
72,548,1,279,997,
16,0,149,1,278,
492,1,276,501,1,
275,506,1,270,998,
16,0,209,1,155,
999,16,0,149,1,
41,1000,16,0,149,
1,128,1001,16,0,
149,1,36,515,1,
35,510,1,29,1002,
16,0,209,1,30,
1003,16,0,149,1,
27,543,1,244,1004,
16,0,149,1,350,
1005,16,0,209,1,
28,539,1,348,573,
1,2,589,1,1,
1006,16,0,149,1,
8,599,1,9,609,
1,22,1007,16,0,
149,1,21,527,1,
20,612,1,19,615,
1,18,618,1,17,
621,1,16,624,1,
15,627,1,14,602,
1,13,631,1,12,
634,1,11,637,1,
10,640,1,223,519,
1,222,497,1,7,
605,1,6,595,1,
3,655,1,4,652,
1,217,1008,16,0,
149,1,216,487,1,
215,579,1,3,1009,
19,115,1,3,1010,
5,34,1,96,1011,
16,0,136,1,196,
1012,16,0,113,1,
195,645,1,194,649,
1,279,1013,16,0,
136,1,277,1014,16,
0,158,1,269,1015,
16,0,167,1,155,
1016,16,0,136,1,
41,1017,16,0,136,
1,30,1018,16,0,
113,1,244,1019,16,
0,136,1,217,1020,
16,0,136,1,22,
1021,16,0,136,1,
128,1022,16,0,136,
1,20,612,1,19,
615,1,18,618,1,
17,621,1,16,624,
1,15,627,1,14,
602,1,13,631,1,
12,634,1,11,637,
1,10,640,1,9,
609,1,8,599,1,
7,605,1,6,595,
1,4,652,1,3,
655,1,2,589,1,
1,1023,16,0,136,
1,0,1024,16,0,
136,1,2,1025,19,
187,1,2,1026,5,
4,1,305,522,1,
95,583,1,72,548,
1,278,492,2,1,0};
new Sfactory(this,"explist",new SCreator(explist_factory));
new Sfactory(this,"unop_2",new SCreator(unop_2_factory));
new Sfactory(this,"FieldExpAssign",new SCreator(FieldExpAssign_factory));
new Sfactory(this,"fieldsep_2",new SCreator(fieldsep_2_factory));
new Sfactory(this,"prefixexp",new SCreator(prefixexp_factory));
new Sfactory(this,"prefixexp_1",new SCreator(prefixexp_1_factory));
new Sfactory(this,"fieldlist_2",new SCreator(fieldlist_2_factory));
new Sfactory(this,"exp_7",new SCreator(exp_7_factory));
new Sfactory(this,"exp_6",new SCreator(exp_6_factory));
new Sfactory(this,"exp_5",new SCreator(exp_5_factory));
new Sfactory(this,"exp_4",new SCreator(exp_4_factory));
new Sfactory(this,"exp_3",new SCreator(exp_3_factory));
new Sfactory(this,"exp_2",new SCreator(exp_2_factory));
new Sfactory(this,"exp_1",new SCreator(exp_1_factory));
new Sfactory(this,"fieldlist",new SCreator(fieldlist_factory));
new Sfactory(this,"prefixexp_2",new SCreator(prefixexp_2_factory));
new Sfactory(this,"tableconstructor_1",new SCreator(tableconstructor_1_factory));
new Sfactory(this,"unop_1",new SCreator(unop_1_factory));
new Sfactory(this,"binop_1",new SCreator(binop_1_factory));
new Sfactory(this,"field_1",new SCreator(field_1_factory));
new Sfactory(this,"PackageRef",new SCreator(PackageRef_factory));
new Sfactory(this,"functioncall_1",new SCreator(functioncall_1_factory));
new Sfactory(this,"unop",new SCreator(unop_factory));
new Sfactory(this,"binop_5",new SCreator(binop_5_factory));
new Sfactory(this,"var_1",new SCreator(var_1_factory));
new Sfactory(this,"arg_4",new SCreator(arg_4_factory));
new Sfactory(this,"exp",new SCreator(exp_factory));
new Sfactory(this,"error",new SCreator(error_factory));
new Sfactory(this,"FieldAssign_1",new SCreator(FieldAssign_1_factory));
new Sfactory(this,"PackageRef_1",new SCreator(PackageRef_1_factory));
new Sfactory(this,"arg",new SCreator(arg_factory));
new Sfactory(this,"FieldExpAssign_1",new SCreator(FieldExpAssign_1_factory));
new Sfactory(this,"fieldlist_1",new SCreator(fieldlist_1_factory));
new Sfactory(this,"binop_2",new SCreator(binop_2_factory));
new Sfactory(this,"tableconstructor",new SCreator(tableconstructor_factory));
new Sfactory(this,"functioncall_2",new SCreator(functioncall_2_factory));
new Sfactory(this,"field",new SCreator(field_factory));
new Sfactory(this,"fieldlist_3",new SCreator(fieldlist_3_factory));
new Sfactory(this,"binop_12",new SCreator(binop_12_factory));
new Sfactory(this,"fieldsep_1",new SCreator(fieldsep_1_factory));
new Sfactory(this,"FieldAssign",new SCreator(FieldAssign_factory));
new Sfactory(this,"binop",new SCreator(binop_factory));
new Sfactory(this,"prefixexp_3",new SCreator(prefixexp_3_factory));
new Sfactory(this,"functioncall",new SCreator(functioncall_factory));
new Sfactory(this,"binop_13",new SCreator(binop_13_factory));
new Sfactory(this,"binop_6",new SCreator(binop_6_factory));
new Sfactory(this,"binop_10",new SCreator(binop_10_factory));
new Sfactory(this,"tableconstructor_2",new SCreator(tableconstructor_2_factory));
new Sfactory(this,"binop_15",new SCreator(binop_15_factory));
new Sfactory(this,"binop_3",new SCreator(binop_3_factory));
new Sfactory(this,"exp_8",new SCreator(exp_8_factory));
new Sfactory(this,"unop_3",new SCreator(unop_3_factory));
new Sfactory(this,"fieldsep",new SCreator(fieldsep_factory));
new Sfactory(this,"explist_1",new SCreator(explist_1_factory));
new Sfactory(this,"explist_2",new SCreator(explist_2_factory));
new Sfactory(this,"binop_14",new SCreator(binop_14_factory));
new Sfactory(this,"arg_3",new SCreator(arg_3_factory));
new Sfactory(this,"arg_2",new SCreator(arg_2_factory));
new Sfactory(this,"arg_1",new SCreator(arg_1_factory));
new Sfactory(this,"TableRef_1",new SCreator(TableRef_1_factory));
new Sfactory(this,"binop_7",new SCreator(binop_7_factory));
new Sfactory(this,"TableRef",new SCreator(TableRef_factory));
new Sfactory(this,"binop_9",new SCreator(binop_9_factory));
new Sfactory(this,"binop_8",new SCreator(binop_8_factory));
new Sfactory(this,"binop_4",new SCreator(binop_4_factory));
new Sfactory(this,"var",new SCreator(var_factory));
new Sfactory(this,"binop_11",new SCreator(binop_11_factory));
}
public static object explist_factory(Parser yyp) { return new explist(yyp); }
public static object unop_2_factory(Parser yyp) { return new unop_2(yyp); }
public static object FieldExpAssign_factory(Parser yyp) { return new FieldExpAssign(yyp); }
public static object fieldsep_2_factory(Parser yyp) { return new fieldsep_2(yyp); }
public static object prefixexp_factory(Parser yyp) { return new prefixexp(yyp); }
public static object prefixexp_1_factory(Parser yyp) { return new prefixexp_1(yyp); }
public static object fieldlist_2_factory(Parser yyp) { return new fieldlist_2(yyp); }
public static object exp_7_factory(Parser yyp) { return new exp_7(yyp); }
public static object exp_6_factory(Parser yyp) { return new exp_6(yyp); }
public static object exp_5_factory(Parser yyp) { return new exp_5(yyp); }
public static object exp_4_factory(Parser yyp) { return new exp_4(yyp); }
public static object exp_3_factory(Parser yyp) { return new exp_3(yyp); }
public static object exp_2_factory(Parser yyp) { return new exp_2(yyp); }
public static object exp_1_factory(Parser yyp) { return new exp_1(yyp); }
public static object fieldlist_factory(Parser yyp) { return new fieldlist(yyp); }
public static object prefixexp_2_factory(Parser yyp) { return new prefixexp_2(yyp); }
public static object tableconstructor_1_factory(Parser yyp) { return new tableconstructor_1(yyp); }
public static object unop_1_factory(Parser yyp) { return new unop_1(yyp); }
public static object binop_1_factory(Parser yyp) { return new binop_1(yyp); }
public static object field_1_factory(Parser yyp) { return new field_1(yyp); }
public static object PackageRef_factory(Parser yyp) { return new PackageRef(yyp); }
public static object functioncall_1_factory(Parser yyp) { return new functioncall_1(yyp); }
public static object unop_factory(Parser yyp) { return new unop(yyp); }
public static object binop_5_factory(Parser yyp) { return new binop_5(yyp); }
public static object var_1_factory(Parser yyp) { return new var_1(yyp); }
public static object arg_4_factory(Parser yyp) { return new arg_4(yyp); }
public static object exp_factory(Parser yyp) { return new exp(yyp); }
public static object error_factory(Parser yyp) { return new error(yyp); }
public static object FieldAssign_1_factory(Parser yyp) { return new FieldAssign_1(yyp); }
public static object PackageRef_1_factory(Parser yyp) { return new PackageRef_1(yyp); }
public static object arg_factory(Parser yyp) { return new arg(yyp); }
public static object FieldExpAssign_1_factory(Parser yyp) { return new FieldExpAssign_1(yyp); }
public static object fieldlist_1_factory(Parser yyp) { return new fieldlist_1(yyp); }
public static object binop_2_factory(Parser yyp) { return new binop_2(yyp); }
public static object tableconstructor_factory(Parser yyp) { return new tableconstructor(yyp); }
public static object functioncall_2_factory(Parser yyp) { return new functioncall_2(yyp); }
public static object field_factory(Parser yyp) { return new field(yyp); }
public static object fieldlist_3_factory(Parser yyp) { return new fieldlist_3(yyp); }
public static object binop_12_factory(Parser yyp) { return new binop_12(yyp); }
public static object fieldsep_1_factory(Parser yyp) { return new fieldsep_1(yyp); }
public static object FieldAssign_factory(Parser yyp) { return new FieldAssign(yyp); }
public static object binop_factory(Parser yyp) { return new binop(yyp); }
public static object prefixexp_3_factory(Parser yyp) { return new prefixexp_3(yyp); }
public static object functioncall_factory(Parser yyp) { return new functioncall(yyp); }
public static object binop_13_factory(Parser yyp) { return new binop_13(yyp); }
public static object binop_6_factory(Parser yyp) { return new binop_6(yyp); }
public static object binop_10_factory(Parser yyp) { return new binop_10(yyp); }
public static object tableconstructor_2_factory(Parser yyp) { return new tableconstructor_2(yyp); }
public static object binop_15_factory(Parser yyp) { return new binop_15(yyp); }
public static object binop_3_factory(Parser yyp) { return new binop_3(yyp); }
public static object exp_8_factory(Parser yyp) { return new exp_8(yyp); }
public static object unop_3_factory(Parser yyp) { return new unop_3(yyp); }
public static object fieldsep_factory(Parser yyp) { return new fieldsep(yyp); }
public static object explist_1_factory(Parser yyp) { return new explist_1(yyp); }
public static object explist_2_factory(Parser yyp) { return new explist_2(yyp); }
public static object binop_14_factory(Parser yyp) { return new binop_14(yyp); }
public static object arg_3_factory(Parser yyp) { return new arg_3(yyp); }
public static object arg_2_factory(Parser yyp) { return new arg_2(yyp); }
public static object arg_1_factory(Parser yyp) { return new arg_1(yyp); }
public static object TableRef_1_factory(Parser yyp) { return new TableRef_1(yyp); }
public static object binop_7_factory(Parser yyp) { return new binop_7(yyp); }
public static object TableRef_factory(Parser yyp) { return new TableRef(yyp); }
public static object binop_9_factory(Parser yyp) { return new binop_9(yyp); }
public static object binop_8_factory(Parser yyp) { return new binop_8(yyp); }
public static object binop_4_factory(Parser yyp) { return new binop_4(yyp); }
public static object var_factory(Parser yyp) { return new var(yyp); }
public static object binop_11_factory(Parser yyp) { return new binop_11(yyp); }
}
public class syntax: Parser {
public syntax():base(new yysyntax(),new tokens()) {}
public syntax(YyParser syms):base(syms,new tokens()) {}
public syntax(YyParser syms,ErrorHandler erh):base(syms,new tokens(erh)) {}

 }
}
