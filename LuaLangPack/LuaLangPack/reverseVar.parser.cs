using System;using Tools;
namespace ReverseLangImpl {
public class chunk : SYMBOL {
	public chunk(Parser yyq):base(yyq) { }
  public override string yyname { get { return "chunk"; }}
  public override int yynum { get { return 53; }}}
public class var : SYMBOL {
	public var(Parser yyq):base(yyq) { }
  public override string yyname { get { return "var"; }}
  public override int yynum { get { return 54; }}}
public class fieldlist : SYMBOL {
	public fieldlist(Parser yyq):base(yyq) { }
  public override string yyname { get { return "fieldlist"; }}
  public override int yynum { get { return 58; }}}
public class fieldsep : SYMBOL {
	public fieldsep(Parser yyq):base(yyq) { }
  public override string yyname { get { return "fieldsep"; }}
  public override int yynum { get { return 60; }}}
public class field : SYMBOL {
	public field(Parser yyq):base(yyq) { }
  public override string yyname { get { return "field"; }}
  public override int yynum { get { return 59; }}}
public class exp : SYMBOL {
	public exp(Parser yyq):base(yyq) { }
  public override string yyname { get { return "exp"; }}
  public override int yynum { get { return 56; }}}
public class explist : SYMBOL {
	public explist(Parser yyq):base(yyq) { }
  public override string yyname { get { return "explist"; }}
  public override int yynum { get { return 63; }}}
public class functioncall : SYMBOL {
	public functioncall(Parser yyq):base(yyq) { }
  public override string yyname { get { return "functioncall"; }}
  public override int yynum { get { return 55; }}}
public class prefixexp : SYMBOL {
	public prefixexp(Parser yyq):base(yyq) { }
  public override string yyname { get { return "prefixexp"; }}
  public override int yynum { get { return 57; }}}
public class arg : SYMBOL {
	public arg(Parser yyq):base(yyq) { }
  public override string yyname { get { return "arg"; }}
  public override int yynum { get { return 64; }}}
public class tableconstructor : SYMBOL {
	public tableconstructor(Parser yyq):base(yyq) { }
  public override string yyname { get { return "tableconstructor"; }}
  public override int yynum { get { return 65; }}}
public class unop : SYMBOL {
	public unop(Parser yyq):base(yyq) { }
  public override string yyname { get { return "unop"; }}
  public override int yynum { get { return 62; }}}
public class binop : SYMBOL {
	public binop(Parser yyq):base(yyq) { }
  public override string yyname { get { return "binop"; }}
  public override int yynum { get { return 61; }}}
public class yysyntax: YyParser {
  public override object Action(Parser yyq,SYMBOL yysym, int yyact) {
    switch(yyact) {
	 case -1: break; //// keep compiler happy
}  return null; }

public class exp_1 : exp {
  public exp_1(Parser yyq):base(yyq){}}

public class exp_2 : exp {
  public exp_2(Parser yyq):base(yyq){}}

public class field_1 : field {
  public field_1(Parser yyq):base(yyq){}}

public class chunk_1 : chunk {
  public chunk_1(Parser yyq):base(yyq){}}

public class chunk_2 : chunk {
  public chunk_2(Parser yyq):base(yyq){}}

public class fieldlist_1 : fieldlist {
  public fieldlist_1(Parser yyq):base(yyq){}}

public class var_1 : var {
  public var_1(Parser yyq):base(yyq){}}

public class explist_1 : explist {
  public explist_1(Parser yyq):base(yyq){}}

public class var_2 : var {
  public var_2(Parser yyq):base(yyq){}}

public class var_3 : var {
  public var_3(Parser yyq):base(yyq){}}

public class field_2 : field {
  public field_2(Parser yyq):base(yyq){}}

public class functioncall_1 : functioncall {
  public functioncall_1(Parser yyq):base(yyq){}}

public class functioncall_2 : functioncall {
  public functioncall_2(Parser yyq):base(yyq){}}

public class fieldlist_2 : fieldlist {
  public fieldlist_2(Parser yyq):base(yyq){}}

public class fieldsep_1 : fieldsep {
  public fieldsep_1(Parser yyq):base(yyq){}}

public class fieldlist_3 : fieldlist {
  public fieldlist_3(Parser yyq):base(yyq){}}

public class exp_3 : exp {
  public exp_3(Parser yyq):base(yyq){}}

public class var_4 : var {
  public var_4(Parser yyq):base(yyq){}}

public class explist_2 : explist {
  public explist_2(Parser yyq):base(yyq){}}

public class exp_4 : exp {
  public exp_4(Parser yyq):base(yyq){}}

public class arg_1 : arg {
  public arg_1(Parser yyq):base(yyq){}}

public class fieldsep_2 : fieldsep {
  public fieldsep_2(Parser yyq):base(yyq){}}

public class prefixexp_1 : prefixexp {
  public prefixexp_1(Parser yyq):base(yyq){}}

public class prefixexp_2 : prefixexp {
  public prefixexp_2(Parser yyq):base(yyq){}}

public class exp_5 : exp {
  public exp_5(Parser yyq):base(yyq){}}

public class exp_6 : exp {
  public exp_6(Parser yyq):base(yyq){}}

public class prefixexp_3 : prefixexp {
  public prefixexp_3(Parser yyq):base(yyq){}}

public class unop_1 : unop {
  public unop_1(Parser yyq):base(yyq){}}

public class unop_2 : unop {
  public unop_2(Parser yyq):base(yyq){}}

public class binop_1 : binop {
  public binop_1(Parser yyq):base(yyq){}}

public class binop_2 : binop {
  public binop_2(Parser yyq):base(yyq){}}

public class unop_3 : unop {
  public unop_3(Parser yyq):base(yyq){}}

public class binop_3 : binop {
  public binop_3(Parser yyq):base(yyq){}}

public class binop_4 : binop {
  public binop_4(Parser yyq):base(yyq){}}

public class binop_5 : binop {
  public binop_5(Parser yyq):base(yyq){}}

public class binop_6 : binop {
  public binop_6(Parser yyq):base(yyq){}}

public class binop_7 : binop {
  public binop_7(Parser yyq):base(yyq){}}

public class binop_8 : binop {
  public binop_8(Parser yyq):base(yyq){}}

public class binop_9 : binop {
  public binop_9(Parser yyq):base(yyq){}}

public class binop_10 : binop {
  public binop_10(Parser yyq):base(yyq){}}

public class binop_11 : binop {
  public binop_11(Parser yyq):base(yyq){}}

public class binop_12 : binop {
  public binop_12(Parser yyq):base(yyq){}}

public class binop_13 : binop {
  public binop_13(Parser yyq):base(yyq){}}

public class binop_14 : binop {
  public binop_14(Parser yyq):base(yyq){}}

public class binop_15 : binop {
  public binop_15(Parser yyq):base(yyq){}}

public class explist_3 : explist {
  public explist_3(Parser yyq):base(yyq){}}

public class arg_2 : arg {
  public arg_2(Parser yyq):base(yyq){}}

public class arg_3 : arg {
  public arg_3(Parser yyq):base(yyq){}}

public class field_3 : field {
  public field_3(Parser yyq):base(yyq){}}

public class arg_4 : arg {
  public arg_4(Parser yyq):base(yyq){}}

public class arg_5 : arg {
  public arg_5(Parser yyq):base(yyq){}}

public class exp_7 : exp {
  public exp_7(Parser yyq):base(yyq){}}

public class tableconstructor_1 : tableconstructor {
  public tableconstructor_1(Parser yyq):base(yyq){}}

public class tableconstructor_2 : tableconstructor {
  public tableconstructor_2(Parser yyq):base(yyq){}}
public yysyntax():base() { arr = new int[] { 
101,4,6,52,0,
46,0,53,0,102,
20,103,4,10,99,
0,104,0,117,0,
110,0,107,0,1,
53,1,2,104,18,
1,302,102,2,0,
105,5,71,1,105,
106,18,1,105,107,
20,108,4,6,101,
0,120,0,112,0,
1,56,1,2,2,
0,1,302,104,1,
97,109,18,1,97,
110,20,111,4,10,
98,0,105,0,110,
0,111,0,112,0,
1,61,1,2,2,
0,1,96,112,18,
1,96,113,20,114,
4,8,117,0,110,
0,111,0,112,0,
1,62,1,2,2,
0,1,303,115,18,
1,303,116,23,117,
4,6,69,0,79,
0,70,0,1,2,
1,6,2,0,1,
195,118,18,1,195,
107,2,0,1,301,
119,18,1,301,120,
20,121,4,6,118,
0,97,0,114,0,
1,54,1,2,2,
0,1,300,122,18,
1,300,123,20,124,
4,24,102,0,117,
0,110,0,99,0,
116,0,105,0,111,
0,110,0,99,0,
97,0,108,0,108,
0,1,55,1,2,
2,0,1,78,125,
18,1,78,107,2,
0,1,70,126,18,
1,70,127,20,128,
4,12,82,0,66,
0,82,0,65,0,
67,0,75,0,1,
12,1,1,2,0,
1,273,129,18,1,
273,130,20,131,4,
18,102,0,105,0,
101,0,108,0,100,
0,108,0,105,0,
115,0,116,0,1,
58,1,2,2,0,
1,68,132,18,1,
68,133,20,134,4,
18,112,0,114,0,
101,0,102,0,105,
0,120,0,101,0,
120,0,112,0,1,
57,1,2,2,0,
1,174,135,18,1,
174,136,20,137,4,
14,101,0,120,0,
112,0,108,0,105,
0,115,0,116,0,
1,63,1,2,2,
0,1,280,138,18,
1,280,139,20,140,
4,12,82,0,80,
0,65,0,82,0,
69,0,78,0,1,
10,1,1,2,0,
1,140,141,18,1,
140,133,2,0,1,
60,142,18,1,60,
143,20,144,4,6,
68,0,79,0,84,
0,1,15,1,1,
2,0,1,59,145,
18,1,59,146,20,
147,4,8,78,0,
65,0,77,0,69,
0,1,3,1,1,
2,0,1,245,148,
18,1,245,149,20,
150,4,12,76,0,
66,0,82,0,65,
0,67,0,75,0,
1,11,1,1,2,
0,1,57,151,18,
1,57,133,2,0,
1,151,152,18,1,
151,133,2,0,1,
259,153,18,1,259,
154,20,155,4,16,
102,0,105,0,101,
0,108,0,100,0,
115,0,101,0,112,
0,1,60,1,2,
2,0,1,258,156,
18,1,258,157,20,
158,4,10,67,0,
79,0,77,0,77,
0,65,0,1,6,
1,1,2,0,1,
256,159,18,1,256,
160,20,161,4,10,
102,0,105,0,101,
0,108,0,100,0,
1,59,1,2,2,
0,1,128,162,18,
1,128,163,20,164,
4,6,78,0,73,
0,76,0,1,43,
1,1,2,0,1,
50,165,18,1,50,
166,20,167,4,10,
67,0,79,0,76,
0,79,0,78,0,
1,7,1,1,2,
0,1,49,168,18,
1,49,146,2,0,
1,225,169,18,1,
225,107,2,0,1,
153,170,18,1,153,
107,2,0,1,127,
171,18,1,127,172,
20,173,4,10,70,
0,65,0,76,0,
83,0,69,0,1,
50,1,1,2,0,
1,44,174,18,1,
44,175,20,176,4,
14,76,0,73,0,
84,0,69,0,82,
0,65,0,76,0,
1,4,1,1,2,
0,1,257,177,18,
1,257,178,20,179,
4,18,83,0,69,
0,77,0,73,0,
67,0,79,0,76,
0,79,0,78,0,
1,8,1,1,2,
0,1,42,180,18,
1,42,181,20,182,
4,6,97,0,114,
0,103,0,1,64,
1,2,2,0,1,
41,183,18,1,41,
120,2,0,1,40,
184,18,1,40,123,
2,0,1,126,185,
18,1,126,186,20,
187,4,8,84,0,
82,0,85,0,69,
0,1,49,1,1,
2,0,1,125,188,
18,1,125,133,2,
0,1,131,189,18,
1,131,149,2,0,
1,35,190,18,1,
35,157,2,0,1,
34,191,18,1,34,
192,20,193,4,12,
76,0,80,0,65,
0,82,0,69,0,
78,0,1,9,1,
1,2,0,1,33,
194,18,1,33,195,
20,196,4,6,78,
0,79,0,84,0,
1,31,1,1,2,
0,1,32,197,18,
1,32,198,20,199,
4,10,80,0,79,
0,85,0,78,0,
68,0,1,19,1,
1,2,0,1,31,
200,18,1,31,201,
20,202,4,8,80,
0,76,0,85,0,
83,0,1,16,1,
1,2,0,1,30,
203,18,1,30,204,
20,205,4,10,77,
0,73,0,78,0,
85,0,83,0,1,
17,1,1,2,0,
1,29,206,18,1,
29,207,20,208,4,
8,77,0,85,0,
76,0,84,0,1,
18,1,1,2,0,
1,28,209,18,1,
28,210,20,211,4,
6,77,0,79,0,
68,0,1,20,1,
1,2,0,1,27,
212,18,1,27,213,
20,214,4,12,68,
0,73,0,86,0,
73,0,68,0,69,
0,1,21,1,1,
2,0,1,26,215,
18,1,26,216,20,
217,4,6,69,0,
88,0,80,0,1,
22,1,1,2,0,
1,25,218,18,1,
25,219,20,220,4,
12,67,0,79,0,
78,0,67,0,65,
0,84,0,1,51,
1,1,2,0,1,
24,221,18,1,24,
222,20,223,4,4,
76,0,84,0,1,
25,1,1,2,0,
1,23,224,18,1,
23,225,20,226,4,
4,71,0,84,0,
1,27,1,1,2,
0,1,22,227,18,
1,22,228,20,229,
4,4,71,0,69,
0,1,28,1,1,
2,0,1,21,230,
18,1,21,231,20,
232,4,4,76,0,
69,0,1,26,1,
1,2,0,1,20,
233,18,1,20,234,
20,235,4,4,69,
0,81,0,1,23,
1,1,2,0,1,
19,236,18,1,19,
237,20,238,4,6,
65,0,78,0,68,
0,1,29,1,1,
2,0,1,18,239,
18,1,18,240,20,
241,4,4,79,0,
82,0,1,30,1,
1,2,0,1,17,
242,18,1,17,243,
20,244,4,6,78,
0,69,0,81,0,
1,24,1,1,2,
0,1,16,245,18,
1,16,107,2,0,
1,15,246,18,1,
15,192,2,0,1,
13,247,18,1,13,
192,2,0,1,12,
248,18,1,12,136,
2,0,1,217,249,
18,1,217,127,2,
0,1,216,250,18,
1,216,146,2,0,
1,215,251,18,1,
215,252,20,253,4,
12,65,0,83,0,
83,0,73,0,71,
0,78,0,1,32,
1,1,2,0,1,
8,254,18,1,8,
139,2,0,1,7,
255,18,1,7,256,
20,257,4,32,116,
0,97,0,98,0,
108,0,101,0,99,
0,111,0,110,0,
115,0,116,0,114,
0,117,0,99,0,
116,0,111,0,114,
0,1,65,1,2,
2,0,1,6,258,
18,1,6,175,2,
0,1,5,259,18,
1,5,260,20,261,
4,12,76,0,66,
0,82,0,65,0,
67,0,69,0,1,
13,1,1,2,0,
1,3,262,18,1,
3,260,2,0,1,
2,263,18,1,2,
130,2,0,1,1,
264,18,1,1,265,
20,266,4,12,82,
0,66,0,82,0,
65,0,67,0,69,
0,1,14,1,1,
2,0,1,0,267,
18,1,0,0,2,
0,268,5,0,269,
5,101,1,119,270,
19,271,4,36,116,
0,97,0,98,0,
108,0,101,0,99,
0,111,0,110,0,
115,0,116,0,114,
0,117,0,99,0,
116,0,111,0,114,
0,95,0,50,0,
1,119,272,5,13,
1,42,273,16,0,
255,1,60,274,16,
0,255,1,131,275,
16,0,255,1,280,
276,16,0,255,1,
35,277,16,0,255,
1,217,278,16,0,
255,1,8,279,16,
0,255,1,259,280,
16,0,255,1,97,
281,16,0,255,1,
50,282,16,0,255,
1,1,283,16,0,
255,1,70,284,16,
0,255,1,0,285,
16,0,255,1,118,
286,19,287,4,36,
116,0,97,0,98,
0,108,0,101,0,
99,0,111,0,110,
0,115,0,116,0,
114,0,117,0,99,
0,116,0,111,0,
114,0,95,0,49,
0,1,118,272,1,
117,288,19,289,4,
10,101,0,120,0,
112,0,95,0,55,
0,1,117,290,5,
8,1,35,291,16,
0,170,1,217,292,
16,0,169,1,8,
293,16,0,245,1,
259,294,16,0,118,
1,97,295,16,0,
106,1,280,296,16,
0,170,1,1,297,
16,0,118,1,70,
298,16,0,125,1,
116,299,19,300,4,
10,97,0,114,0,
103,0,95,0,53,
0,1,116,301,5,
13,1,42,302,16,
0,180,1,60,303,
16,0,180,1,131,
304,16,0,180,1,
280,305,16,0,180,
1,35,306,16,0,
180,1,217,307,16,
0,180,1,8,308,
16,0,180,1,259,
309,16,0,180,1,
97,310,16,0,180,
1,50,311,16,0,
180,1,1,312,16,
0,180,1,70,313,
16,0,180,1,0,
314,16,0,180,1,
115,315,19,316,4,
10,97,0,114,0,
103,0,95,0,52,
0,1,115,301,1,
114,317,19,318,4,
14,102,0,105,0,
101,0,108,0,100,
0,95,0,51,0,
1,114,319,5,2,
1,259,320,16,0,
159,1,1,321,16,
0,159,1,113,322,
19,323,4,10,97,
0,114,0,103,0,
95,0,51,0,1,
113,301,1,112,324,
19,325,4,10,97,
0,114,0,103,0,
95,0,50,0,1,
112,301,1,111,326,
19,327,4,18,101,
0,120,0,112,0,
108,0,105,0,115,
0,116,0,95,0,
51,0,1,111,328,
5,3,1,8,329,
16,0,248,1,280,
330,16,0,248,1,
35,331,16,0,135,
1,110,332,19,333,
4,16,98,0,105,
0,110,0,111,0,
112,0,95,0,49,
0,53,0,1,110,
334,5,6,1,153,
335,16,0,109,1,
195,336,16,0,109,
1,16,337,16,0,
109,1,105,338,16,
0,109,1,225,339,
16,0,109,1,78,
340,16,0,109,1,
109,341,19,342,4,
16,98,0,105,0,
110,0,111,0,112,
0,95,0,49,0,
52,0,1,109,334,
1,108,343,19,344,
4,16,98,0,105,
0,110,0,111,0,
112,0,95,0,49,
0,51,0,1,108,
334,1,107,345,19,
346,4,16,98,0,
105,0,110,0,111,
0,112,0,95,0,
49,0,50,0,1,
107,334,1,106,347,
19,348,4,16,98,
0,105,0,110,0,
111,0,112,0,95,
0,49,0,49,0,
1,106,334,1,105,
349,19,350,4,16,
98,0,105,0,110,
0,111,0,112,0,
95,0,49,0,48,
0,1,105,334,1,
104,351,19,352,4,
14,98,0,105,0,
110,0,111,0,112,
0,95,0,57,0,
1,104,334,1,103,
353,19,354,4,14,
98,0,105,0,110,
0,111,0,112,0,
95,0,56,0,1,
103,334,1,102,355,
19,356,4,14,98,
0,105,0,110,0,
111,0,112,0,95,
0,55,0,1,102,
334,1,101,357,19,
358,4,14,98,0,
105,0,110,0,111,
0,112,0,95,0,
54,0,1,101,334,
1,100,359,19,360,
4,14,98,0,105,
0,110,0,111,0,
112,0,95,0,53,
0,1,100,334,1,
99,361,19,362,4,
14,98,0,105,0,
110,0,111,0,112,
0,95,0,52,0,
1,99,334,1,98,
363,19,364,4,14,
98,0,105,0,110,
0,111,0,112,0,
95,0,51,0,1,
98,334,1,97,365,
19,366,4,12,117,
0,110,0,111,0,
112,0,95,0,51,
0,1,97,367,5,
6,1,153,368,16,
0,112,1,195,369,
16,0,112,1,16,
370,16,0,112,1,
105,371,16,0,112,
1,225,372,16,0,
112,1,78,373,16,
0,112,1,96,374,
19,375,4,14,98,
0,105,0,110,0,
111,0,112,0,95,
0,50,0,1,96,
334,1,95,376,19,
377,4,14,98,0,
105,0,110,0,111,
0,112,0,95,0,
49,0,1,95,334,
1,94,378,19,379,
4,12,117,0,110,
0,111,0,112,0,
95,0,50,0,1,
94,367,1,93,380,
19,381,4,12,117,
0,110,0,111,0,
112,0,95,0,49,
0,1,93,367,1,
92,382,19,383,4,
22,112,0,114,0,
101,0,102,0,105,
0,120,0,101,0,
120,0,112,0,95,
0,51,0,1,92,
384,5,12,1,42,
385,16,0,152,1,
60,386,16,0,132,
1,131,387,16,0,
141,1,280,388,16,
0,188,1,35,389,
16,0,188,1,217,
390,16,0,188,1,
8,391,16,0,188,
1,259,392,16,0,
188,1,97,393,16,
0,188,1,50,394,
16,0,151,1,1,
395,16,0,188,1,
70,396,16,0,188,
1,91,397,19,398,
4,10,101,0,120,
0,112,0,95,0,
54,0,1,91,290,
1,90,399,19,400,
4,10,101,0,120,
0,112,0,95,0,
53,0,1,90,290,
1,89,401,19,402,
4,22,112,0,114,
0,101,0,102,0,
105,0,120,0,101,
0,120,0,112,0,
95,0,50,0,1,
89,384,1,88,403,
19,404,4,22,112,
0,114,0,101,0,
102,0,105,0,120,
0,101,0,120,0,
112,0,95,0,49,
0,1,88,384,1,
87,405,19,406,4,
20,102,0,105,0,
101,0,108,0,100,
0,115,0,101,0,
112,0,95,0,50,
0,1,87,407,5,
1,1,256,408,16,
0,153,1,86,409,
19,410,4,10,97,
0,114,0,103,0,
95,0,49,0,1,
86,301,1,85,411,
19,412,4,10,101,
0,120,0,112,0,
95,0,52,0,1,
85,290,1,84,413,
19,414,4,18,101,
0,120,0,112,0,
108,0,105,0,115,
0,116,0,95,0,
50,0,1,84,328,
1,83,415,19,416,
4,10,118,0,97,
0,114,0,95,0,
52,0,1,83,417,
5,13,1,42,418,
16,0,183,1,60,
419,16,0,183,1,
131,420,16,0,183,
1,280,421,16,0,
183,1,35,422,16,
0,183,1,217,423,
16,0,183,1,8,
424,16,0,183,1,
259,425,16,0,183,
1,97,426,16,0,
183,1,50,427,16,
0,183,1,1,428,
16,0,183,1,70,
429,16,0,183,1,
0,430,16,0,119,
1,82,431,19,432,
4,10,101,0,120,
0,112,0,95,0,
51,0,1,82,290,
1,81,433,19,434,
4,22,102,0,105,
0,101,0,108,0,
100,0,108,0,105,
0,115,0,116,0,
95,0,51,0,1,
81,435,5,2,1,
259,436,16,0,129,
1,1,437,16,0,
263,1,80,438,19,
439,4,20,102,0,
105,0,101,0,108,
0,100,0,115,0,
101,0,112,0,95,
0,49,0,1,80,
407,1,79,440,19,
441,4,22,102,0,
105,0,101,0,108,
0,100,0,108,0,
105,0,115,0,116,
0,95,0,50,0,
1,79,435,1,78,
442,19,443,4,28,
102,0,117,0,110,
0,99,0,116,0,
105,0,111,0,110,
0,99,0,97,0,
108,0,108,0,95,
0,50,0,1,78,
444,5,13,1,42,
445,16,0,184,1,
60,446,16,0,184,
1,131,447,16,0,
184,1,280,448,16,
0,184,1,35,449,
16,0,184,1,217,
450,16,0,184,1,
8,451,16,0,184,
1,259,452,16,0,
184,1,97,453,16,
0,184,1,50,454,
16,0,184,1,1,
455,16,0,184,1,
70,456,16,0,184,
1,0,457,16,0,
122,1,77,458,19,
459,4,28,102,0,
117,0,110,0,99,
0,116,0,105,0,
111,0,110,0,99,
0,97,0,108,0,
108,0,95,0,49,
0,1,77,444,1,
76,460,19,461,4,
14,102,0,105,0,
101,0,108,0,100,
0,95,0,50,0,
1,76,319,1,75,
462,19,463,4,10,
118,0,97,0,114,
0,95,0,51,0,
1,75,417,1,74,
464,19,465,4,10,
118,0,97,0,114,
0,95,0,50,0,
1,74,417,1,73,
466,19,467,4,18,
101,0,120,0,112,
0,108,0,105,0,
115,0,116,0,95,
0,49,0,1,73,
328,1,72,468,19,
469,4,10,118,0,
97,0,114,0,95,
0,49,0,1,72,
417,1,71,470,19,
471,4,22,102,0,
105,0,101,0,108,
0,100,0,108,0,
105,0,115,0,116,
0,95,0,49,0,
1,71,435,1,70,
472,19,473,4,14,
99,0,104,0,117,
0,110,0,107,0,
95,0,50,0,1,
70,474,5,1,1,
0,475,16,0,104,
1,69,476,19,477,
4,14,99,0,104,
0,117,0,110,0,
107,0,95,0,49,
0,1,69,474,1,
68,478,19,479,4,
14,102,0,105,0,
101,0,108,0,100,
0,95,0,49,0,
1,68,319,1,67,
480,19,481,4,10,
101,0,120,0,112,
0,95,0,50,0,
1,67,290,1,66,
482,19,483,4,10,
101,0,120,0,112,
0,95,0,49,0,
1,66,290,1,65,
484,19,257,1,65,
272,1,64,485,19,
182,1,64,301,1,
63,486,19,137,1,
63,328,1,62,487,
19,114,1,62,367,
1,61,488,19,111,
1,61,334,1,60,
489,19,155,1,60,
407,1,59,490,19,
161,1,59,319,1,
58,491,19,131,1,
58,435,1,57,492,
19,134,1,57,384,
1,56,493,19,108,
1,56,290,1,55,
494,19,124,1,55,
444,1,54,495,19,
121,1,54,417,1,
53,496,19,103,1,
53,474,1,51,497,
19,220,1,51,498,
5,24,1,140,499,
17,500,15,501,4,
8,37,0,118,0,
97,0,114,0,1,
-1,1,5,120,1,
4,1,4,502,22,
1,4,1,34,503,
17,504,15,505,4,
20,37,0,112,0,
114,0,101,0,102,
0,105,0,120,0,
101,0,120,0,112,
0,1,-1,1,5,
133,1,3,1,3,
506,22,1,27,1,
41,507,17,508,15,
505,1,-1,1,5,
133,1,1,1,1,
509,22,1,25,1,
40,510,17,511,15,
505,1,-1,1,5,
133,1,1,1,1,
512,22,1,26,1,
33,513,17,514,15,
515,4,10,37,0,
117,0,110,0,111,
0,112,0,1,-1,
1,5,113,1,1,
1,1,516,22,1,
35,1,225,517,16,
0,218,1,125,518,
17,519,15,520,4,
8,37,0,101,0,
120,0,112,0,1,
-1,1,5,107,1,
1,1,1,521,22,
1,18,1,32,522,
17,523,15,515,1,
-1,1,5,113,1,
1,1,1,524,22,
1,36,1,128,525,
17,526,15,520,1,
-1,1,5,107,1,
1,1,1,527,22,
1,14,1,127,528,
17,529,15,520,1,
-1,1,5,107,1,
1,1,1,530,22,
1,15,1,126,531,
17,532,15,520,1,
-1,1,5,107,1,
1,1,1,533,22,
1,16,1,78,534,
16,0,218,1,30,
535,17,536,15,515,
1,-1,1,5,113,
1,1,1,1,537,
22,1,34,1,68,
538,17,539,15,501,
1,-1,1,5,120,
1,3,1,3,540,
22,1,5,1,16,
541,16,0,218,1,
153,542,16,0,218,
1,151,543,17,544,
15,545,4,26,37,
0,102,0,117,0,
110,0,99,0,116,
0,105,0,111,0,
110,0,99,0,97,
0,108,0,108,0,
1,-1,1,5,123,
1,2,1,2,546,
22,1,23,1,195,
547,16,0,218,1,
59,548,17,549,15,
501,1,-1,1,5,
120,1,1,1,1,
550,22,1,3,1,
105,551,16,0,218,
1,57,552,17,553,
15,545,1,-1,1,
5,123,1,4,1,
4,554,22,1,24,
1,96,555,17,556,
15,520,1,-1,1,
5,107,1,2,1,
2,557,22,1,20,
1,6,558,17,559,
15,520,1,-1,1,
5,107,1,1,1,
1,560,22,1,17,
1,49,561,17,562,
15,501,1,-1,1,
5,120,1,1,1,
1,550,1,50,563,
19,173,1,50,564,
5,25,1,280,565,
16,0,171,1,27,
566,17,567,15,568,
4,12,37,0,98,
0,105,0,110,0,
111,0,112,0,1,
-1,1,5,110,1,
1,1,1,569,22,
1,41,1,35,570,
16,0,171,1,22,
571,17,572,15,568,
1,-1,1,5,110,
1,1,1,1,573,
22,1,46,1,258,
574,17,575,15,576,
4,18,37,0,102,
0,105,0,101,0,
108,0,100,0,115,
0,101,0,112,0,
1,-1,1,5,154,
1,1,1,1,577,
22,1,9,1,24,
578,17,579,15,568,
1,-1,1,5,110,
1,1,1,1,580,
22,1,44,1,31,
581,17,582,15,568,
1,-1,1,5,110,
1,1,1,1,583,
22,1,37,1,30,
584,17,585,15,568,
1,-1,1,5,110,
1,1,1,1,586,
22,1,38,1,29,
587,17,588,15,568,
1,-1,1,5,110,
1,1,1,1,589,
22,1,39,1,28,
590,17,591,15,568,
1,-1,1,5,110,
1,1,1,1,592,
22,1,40,1,70,
593,16,0,171,1,
26,594,17,595,15,
568,1,-1,1,5,
110,1,1,1,1,
596,22,1,42,1,
25,597,17,598,15,
568,1,-1,1,5,
110,1,1,1,1,
599,22,1,43,1,
259,600,16,0,171,
1,23,601,17,602,
15,568,1,-1,1,
5,110,1,1,1,
1,603,22,1,45,
1,257,604,17,605,
15,576,1,-1,1,
5,154,1,1,1,
1,606,22,1,10,
1,21,607,17,608,
15,568,1,-1,1,
5,110,1,1,1,
1,609,22,1,47,
1,20,610,17,611,
15,568,1,-1,1,
5,110,1,1,1,
1,612,22,1,48,
1,19,613,17,614,
15,568,1,-1,1,
5,110,1,1,1,
1,615,22,1,49,
1,18,616,17,617,
15,568,1,-1,1,
5,110,1,1,1,
1,618,22,1,50,
1,17,619,17,620,
15,568,1,-1,1,
5,110,1,1,1,
1,621,22,1,51,
1,8,622,16,0,
171,1,217,623,16,
0,171,1,97,624,
16,0,171,1,1,
625,16,0,171,1,
49,626,19,187,1,
49,627,5,25,1,
280,628,16,0,185,
1,27,566,1,35,
629,16,0,185,1,
22,571,1,258,574,
1,24,578,1,31,
581,1,30,584,1,
29,587,1,28,590,
1,70,630,16,0,
185,1,26,594,1,
25,597,1,259,631,
16,0,185,1,23,
601,1,257,604,1,
21,607,1,20,610,
1,19,613,1,18,
616,1,17,619,1,
8,632,16,0,185,
1,217,633,16,0,
185,1,97,634,16,
0,185,1,1,635,
16,0,185,1,43,
636,19,164,1,43,
637,5,25,1,280,
638,16,0,162,1,
27,566,1,35,639,
16,0,162,1,22,
571,1,258,574,1,
24,578,1,31,581,
1,30,584,1,29,
587,1,28,590,1,
70,640,16,0,162,
1,26,594,1,25,
597,1,259,641,16,
0,162,1,23,601,
1,257,604,1,21,
607,1,20,610,1,
19,613,1,18,616,
1,17,619,1,8,
642,16,0,162,1,
217,643,16,0,162,
1,97,644,16,0,
162,1,1,645,16,
0,162,1,32,646,
19,253,1,32,647,
5,20,1,140,499,
1,41,507,1,40,
510,1,34,503,1,
33,513,1,32,522,
1,128,525,1,127,
528,1,126,531,1,
125,518,1,30,535,
1,68,538,1,195,
648,16,0,251,1,
57,552,1,59,548,
1,105,649,17,650,
15,520,1,-1,1,
5,107,1,3,1,
3,651,22,1,19,
1,151,543,1,96,
555,1,6,558,1,
49,561,1,31,652,
19,196,1,31,653,
5,24,1,140,499,
1,34,503,1,41,
507,1,40,510,1,
33,513,1,225,654,
16,0,194,1,125,
518,1,32,522,1,
128,525,1,127,528,
1,126,531,1,78,
655,16,0,194,1,
30,535,1,68,538,
1,16,656,16,0,
194,1,153,657,16,
0,194,1,151,543,
1,195,658,16,0,
194,1,59,548,1,
105,659,16,0,194,
1,57,552,1,96,
555,1,6,558,1,
49,561,1,30,660,
19,241,1,30,661,
5,24,1,140,499,
1,34,503,1,41,
507,1,40,510,1,
33,513,1,225,662,
16,0,239,1,125,
518,1,32,522,1,
128,525,1,127,528,
1,126,531,1,78,
663,16,0,239,1,
30,535,1,68,538,
1,16,664,16,0,
239,1,153,665,16,
0,239,1,151,543,
1,195,666,16,0,
239,1,59,548,1,
105,667,16,0,239,
1,57,552,1,96,
555,1,6,558,1,
49,561,1,29,668,
19,238,1,29,669,
5,24,1,140,499,
1,34,503,1,41,
507,1,40,510,1,
33,513,1,225,670,
16,0,236,1,125,
518,1,32,522,1,
128,525,1,127,528,
1,126,531,1,78,
671,16,0,236,1,
30,535,1,68,538,
1,16,672,16,0,
236,1,153,673,16,
0,236,1,151,543,
1,195,674,16,0,
236,1,59,548,1,
105,675,16,0,236,
1,57,552,1,96,
555,1,6,558,1,
49,561,1,28,676,
19,229,1,28,677,
5,24,1,140,499,
1,34,503,1,41,
507,1,40,510,1,
33,513,1,225,678,
16,0,227,1,125,
518,1,32,522,1,
128,525,1,127,528,
1,126,531,1,78,
679,16,0,227,1,
30,535,1,68,538,
1,16,680,16,0,
227,1,153,681,16,
0,227,1,151,543,
1,195,682,16,0,
227,1,59,548,1,
105,683,16,0,227,
1,57,552,1,96,
555,1,6,558,1,
49,561,1,27,684,
19,226,1,27,685,
5,24,1,140,499,
1,34,503,1,41,
507,1,40,510,1,
33,513,1,225,686,
16,0,224,1,125,
518,1,32,522,1,
128,525,1,127,528,
1,126,531,1,78,
687,16,0,224,1,
30,535,1,68,538,
1,16,688,16,0,
224,1,153,689,16,
0,224,1,151,543,
1,195,690,16,0,
224,1,59,548,1,
105,691,16,0,224,
1,57,552,1,96,
555,1,6,558,1,
49,561,1,26,692,
19,232,1,26,693,
5,24,1,140,499,
1,34,503,1,41,
507,1,40,510,1,
33,513,1,225,694,
16,0,230,1,125,
518,1,32,522,1,
128,525,1,127,528,
1,126,531,1,78,
695,16,0,230,1,
30,535,1,68,538,
1,16,696,16,0,
230,1,153,697,16,
0,230,1,151,543,
1,195,698,16,0,
230,1,59,548,1,
105,699,16,0,230,
1,57,552,1,96,
555,1,6,558,1,
49,561,1,25,700,
19,223,1,25,701,
5,24,1,140,499,
1,34,503,1,41,
507,1,40,510,1,
33,513,1,225,702,
16,0,221,1,125,
518,1,32,522,1,
128,525,1,127,528,
1,126,531,1,78,
703,16,0,221,1,
30,535,1,68,538,
1,16,704,16,0,
221,1,153,705,16,
0,221,1,151,543,
1,195,706,16,0,
221,1,59,548,1,
105,707,16,0,221,
1,57,552,1,96,
555,1,6,558,1,
49,561,1,24,708,
19,244,1,24,709,
5,24,1,140,499,
1,34,503,1,41,
507,1,40,510,1,
33,513,1,225,710,
16,0,242,1,125,
518,1,32,522,1,
128,525,1,127,528,
1,126,531,1,78,
711,16,0,242,1,
30,535,1,68,538,
1,16,712,16,0,
242,1,153,713,16,
0,242,1,151,543,
1,195,714,16,0,
242,1,59,548,1,
105,715,16,0,242,
1,57,552,1,96,
555,1,6,558,1,
49,561,1,23,716,
19,235,1,23,717,
5,24,1,140,499,
1,34,503,1,41,
507,1,40,510,1,
33,513,1,225,718,
16,0,233,1,125,
518,1,32,522,1,
128,525,1,127,528,
1,126,531,1,78,
719,16,0,233,1,
30,535,1,68,538,
1,16,720,16,0,
233,1,153,721,16,
0,233,1,151,543,
1,195,722,16,0,
233,1,59,548,1,
105,723,16,0,233,
1,57,552,1,96,
555,1,6,558,1,
49,561,1,22,724,
19,217,1,22,725,
5,24,1,140,499,
1,34,503,1,41,
507,1,40,510,1,
33,513,1,225,726,
16,0,215,1,125,
518,1,32,522,1,
128,525,1,127,528,
1,126,531,1,78,
727,16,0,215,1,
30,535,1,68,538,
1,16,728,16,0,
215,1,153,729,16,
0,215,1,151,543,
1,195,730,16,0,
215,1,59,548,1,
105,731,16,0,215,
1,57,552,1,96,
555,1,6,558,1,
49,561,1,21,732,
19,214,1,21,733,
5,24,1,140,499,
1,34,503,1,41,
507,1,40,510,1,
33,513,1,225,734,
16,0,212,1,125,
518,1,32,522,1,
128,525,1,127,528,
1,126,531,1,78,
735,16,0,212,1,
30,535,1,68,538,
1,16,736,16,0,
212,1,153,737,16,
0,212,1,151,543,
1,195,738,16,0,
212,1,59,548,1,
105,739,16,0,212,
1,57,552,1,96,
555,1,6,558,1,
49,561,1,20,740,
19,211,1,20,741,
5,24,1,140,499,
1,34,503,1,41,
507,1,40,510,1,
33,513,1,225,742,
16,0,209,1,125,
518,1,32,522,1,
128,525,1,127,528,
1,126,531,1,78,
743,16,0,209,1,
30,535,1,68,538,
1,16,744,16,0,
209,1,153,745,16,
0,209,1,151,543,
1,195,746,16,0,
209,1,59,548,1,
105,747,16,0,209,
1,57,552,1,96,
555,1,6,558,1,
49,561,1,19,748,
19,199,1,19,749,
5,24,1,140,499,
1,34,503,1,41,
507,1,40,510,1,
33,513,1,225,750,
16,0,197,1,125,
518,1,32,522,1,
128,525,1,127,528,
1,126,531,1,78,
751,16,0,197,1,
30,535,1,68,538,
1,16,752,16,0,
197,1,153,753,16,
0,197,1,151,543,
1,195,754,16,0,
197,1,59,548,1,
105,755,16,0,197,
1,57,552,1,96,
555,1,6,558,1,
49,561,1,18,756,
19,208,1,18,757,
5,24,1,140,499,
1,34,503,1,41,
507,1,40,510,1,
33,513,1,225,758,
16,0,206,1,125,
518,1,32,522,1,
128,525,1,127,528,
1,126,531,1,78,
759,16,0,206,1,
30,535,1,68,538,
1,16,760,16,0,
206,1,153,761,16,
0,206,1,151,543,
1,195,762,16,0,
206,1,59,548,1,
105,763,16,0,206,
1,57,552,1,96,
555,1,6,558,1,
49,561,1,17,764,
19,205,1,17,765,
5,24,1,140,499,
1,34,503,1,41,
507,1,40,510,1,
33,513,1,225,766,
16,0,203,1,125,
518,1,32,522,1,
128,525,1,127,528,
1,126,531,1,78,
767,16,0,203,1,
30,535,1,68,538,
1,16,768,16,0,
203,1,153,769,16,
0,203,1,151,543,
1,195,770,16,0,
203,1,59,548,1,
105,771,16,0,203,
1,57,552,1,96,
555,1,6,558,1,
49,561,1,16,772,
19,202,1,16,773,
5,24,1,140,499,
1,34,503,1,41,
507,1,40,510,1,
33,513,1,225,774,
16,0,200,1,125,
518,1,32,522,1,
128,525,1,127,528,
1,126,531,1,78,
775,16,0,200,1,
30,535,1,68,538,
1,16,776,16,0,
200,1,153,777,16,
0,200,1,151,543,
1,195,778,16,0,
200,1,59,548,1,
105,779,16,0,200,
1,57,552,1,96,
555,1,6,558,1,
49,561,1,15,780,
19,144,1,15,781,
5,2,1,49,782,
16,0,142,1,59,
783,16,0,142,1,
14,784,19,266,1,
14,785,5,37,1,
97,786,16,0,264,
1,70,787,16,0,
264,1,280,788,16,
0,264,1,60,789,
16,0,264,1,50,
790,16,0,264,1,
44,791,17,792,15,
793,4,8,37,0,
97,0,114,0,103,
0,1,-1,1,5,
181,1,1,1,1,
794,22,1,31,1,
259,795,16,0,264,
1,258,574,1,257,
604,1,42,796,16,
0,264,1,131,797,
16,0,264,1,35,
798,16,0,264,1,
31,581,1,30,584,
1,29,587,1,28,
590,1,27,566,1,
26,594,1,25,597,
1,24,578,1,23,
601,1,22,571,1,
21,607,1,20,610,
1,19,613,1,18,
616,1,17,619,1,
15,799,17,800,15,
793,1,-1,1,5,
181,1,2,1,2,
801,22,1,28,1,
13,802,17,803,15,
793,1,-1,1,5,
181,1,3,1,3,
804,22,1,29,1,
3,805,17,806,15,
807,4,34,37,0,
116,0,97,0,98,
0,108,0,101,0,
99,0,111,0,110,
0,115,0,116,0,
114,0,117,0,99,
0,116,0,111,0,
114,0,1,-1,1,
5,256,1,3,1,
3,808,22,1,33,
1,8,809,16,0,
264,1,7,810,17,
811,15,793,1,-1,
1,5,181,1,1,
1,1,812,22,1,
30,1,6,813,17,
814,15,793,1,-1,
1,5,181,1,1,
1,1,794,1,5,
815,17,816,15,807,
1,-1,1,5,256,
1,2,1,2,817,
22,1,32,1,217,
818,16,0,264,1,
1,819,16,0,264,
1,0,820,16,0,
264,1,13,821,19,
261,1,13,822,5,
29,1,140,499,1,
41,507,1,40,510,
1,273,823,17,824,
15,825,4,20,37,
0,102,0,105,0,
101,0,108,0,100,
0,108,0,105,0,
115,0,116,0,1,
-1,1,5,130,1,
3,1,3,826,22,
1,7,1,34,503,
1,33,513,1,32,
522,1,128,525,1,
127,528,1,126,531,
1,125,518,1,30,
535,1,216,827,17,
828,15,829,4,12,
37,0,102,0,105,
0,101,0,108,0,
100,0,1,-1,1,
5,160,1,3,1,
3,830,22,1,12,
1,68,538,1,259,
831,17,832,15,825,
1,-1,1,5,130,
1,2,1,2,833,
22,1,8,1,258,
574,1,257,604,1,
256,834,17,835,15,
825,1,-1,1,5,
130,1,1,1,1,
836,22,1,6,1,
245,837,17,838,15,
829,1,-1,1,5,
160,1,5,1,5,
839,22,1,11,1,
151,543,1,59,548,
1,105,649,1,57,
552,1,195,840,17,
841,15,829,1,-1,
1,5,160,1,1,
1,1,842,22,1,
13,1,6,558,1,
49,561,1,2,843,
16,0,262,1,96,
555,1,1,844,16,
0,259,1,12,845,
19,128,1,12,846,
5,38,1,97,847,
16,0,126,1,70,
848,16,0,126,1,
280,849,16,0,126,
1,60,850,16,0,
126,1,50,851,16,
0,126,1,44,791,
1,259,852,16,0,
126,1,258,574,1,
257,604,1,42,853,
16,0,126,1,131,
854,16,0,126,1,
35,855,16,0,126,
1,31,581,1,30,
584,1,29,587,1,
28,590,1,27,566,
1,26,594,1,25,
597,1,24,578,1,
23,601,1,22,571,
1,21,607,1,20,
610,1,19,613,1,
18,616,1,17,619,
1,15,799,1,13,
802,1,1,856,16,
0,126,1,3,805,
1,8,857,16,0,
126,1,7,810,1,
6,813,1,5,815,
1,217,858,16,0,
126,1,215,859,16,
0,249,1,0,860,
16,0,126,1,11,
861,19,150,1,11,
862,5,21,1,140,
499,1,34,503,1,
41,507,1,40,510,
1,33,513,1,225,
863,16,0,148,1,
125,518,1,32,522,
1,128,525,1,127,
528,1,126,531,1,
78,864,16,0,189,
1,30,535,1,68,
538,1,151,543,1,
59,548,1,105,649,
1,57,552,1,96,
555,1,6,558,1,
49,561,1,10,865,
19,140,1,10,866,
5,37,1,97,867,
16,0,254,1,70,
868,16,0,254,1,
280,869,16,0,254,
1,60,870,16,0,
254,1,50,871,16,
0,254,1,44,791,
1,259,872,16,0,
254,1,258,574,1,
257,604,1,42,873,
16,0,254,1,131,
874,16,0,254,1,
35,875,16,0,254,
1,31,581,1,30,
584,1,29,587,1,
28,590,1,27,566,
1,26,594,1,25,
597,1,24,578,1,
23,601,1,22,571,
1,21,607,1,20,
610,1,19,613,1,
18,616,1,17,619,
1,15,799,1,13,
802,1,3,805,1,
8,876,16,0,254,
1,7,810,1,6,
813,1,5,815,1,
217,877,16,0,254,
1,1,878,16,0,
254,1,0,879,16,
0,138,1,9,880,
19,193,1,9,881,
5,25,1,140,499,
1,280,882,16,0,
246,1,41,507,1,
40,510,1,34,503,
1,33,513,1,32,
522,1,128,525,1,
127,528,1,126,531,
1,125,518,1,30,
535,1,68,538,1,
16,883,16,0,191,
1,153,884,17,885,
15,886,4,16,37,
0,101,0,120,0,
112,0,108,0,105,
0,115,0,116,0,
1,-1,1,5,136,
1,1,1,1,887,
22,1,22,1,151,
543,1,12,888,16,
0,247,1,59,548,
1,105,649,1,57,
552,1,8,889,16,
0,246,1,96,555,
1,6,558,1,49,
561,1,174,890,17,
891,15,886,1,-1,
1,5,136,1,3,
1,3,892,22,1,
21,1,8,893,19,
179,1,8,894,5,
23,1,140,499,1,
41,507,1,40,510,
1,34,503,1,33,
513,1,32,522,1,
128,525,1,127,528,
1,126,531,1,125,
518,1,30,535,1,
216,827,1,68,538,
1,256,895,16,0,
177,1,245,837,1,
151,543,1,59,548,
1,105,649,1,57,
552,1,195,840,1,
6,558,1,49,561,
1,96,555,1,7,
896,19,167,1,7,
897,5,1,1,49,
898,16,0,165,1,
6,899,19,158,1,
6,900,5,25,1,
140,499,1,41,507,
1,40,510,1,34,
503,1,33,513,1,
32,522,1,128,525,
1,127,528,1,126,
531,1,125,518,1,
30,535,1,216,827,
1,68,538,1,256,
901,16,0,156,1,
16,902,16,0,190,
1,245,837,1,153,
903,16,0,190,1,
151,543,1,59,548,
1,105,649,1,57,
552,1,195,840,1,
6,558,1,49,561,
1,96,555,1,4,
904,19,176,1,4,
905,5,37,1,97,
906,16,0,258,1,
70,907,16,0,258,
1,280,908,16,0,
258,1,60,909,16,
0,174,1,50,910,
16,0,174,1,44,
791,1,259,911,16,
0,258,1,258,574,
1,257,604,1,42,
912,16,0,174,1,
131,913,16,0,174,
1,35,914,16,0,
258,1,31,581,1,
30,584,1,29,587,
1,28,590,1,27,
566,1,26,594,1,
25,597,1,24,578,
1,23,601,1,22,
571,1,21,607,1,
20,610,1,19,613,
1,18,616,1,17,
619,1,15,799,1,
13,802,1,3,805,
1,8,915,16,0,
258,1,7,810,1,
6,813,1,5,815,
1,217,916,16,0,
258,1,1,917,16,
0,258,1,0,918,
16,0,174,1,3,
919,19,147,1,3,
920,5,38,1,97,
921,16,0,145,1,
70,922,16,0,145,
1,280,923,16,0,
145,1,60,924,16,
0,145,1,50,925,
16,0,145,1,44,
791,1,259,926,16,
0,145,1,258,574,
1,257,604,1,42,
927,16,0,168,1,
131,928,16,0,145,
1,35,929,16,0,
145,1,31,581,1,
30,584,1,29,587,
1,28,590,1,27,
566,1,26,594,1,
25,597,1,24,578,
1,23,601,1,22,
571,1,21,607,1,
20,610,1,19,613,
1,18,616,1,17,
619,1,15,799,1,
13,802,1,1,930,
16,0,145,1,3,
805,1,8,931,16,
0,145,1,7,810,
1,6,813,1,5,
815,1,217,932,16,
0,145,1,215,933,
16,0,250,1,0,
934,16,0,145,1,
2,935,19,117,1,
2,936,5,11,1,
68,538,1,151,543,
1,41,507,1,40,
510,1,34,503,1,
59,548,1,57,552,
1,140,499,1,49,
561,1,301,937,17,
938,15,939,4,12,
37,0,99,0,104,
0,117,0,110,0,
107,0,1,-1,1,
5,102,1,1,1,
1,940,22,1,1,
1,300,941,17,942,
15,939,1,-1,1,
5,102,1,1,1,
1,943,22,1,2,
2,1,0};
new Sfactory(this,"field_2",new SCreator(field_2_factory));
new Sfactory(this,"explist",new SCreator(explist_factory));
new Sfactory(this,"unop_2",new SCreator(unop_2_factory));
new Sfactory(this,"fieldsep_2",new SCreator(fieldsep_2_factory));
new Sfactory(this,"prefixexp_1",new SCreator(prefixexp_1_factory));
new Sfactory(this,"fieldlist_2",new SCreator(fieldlist_2_factory));
new Sfactory(this,"exp_7",new SCreator(exp_7_factory));
new Sfactory(this,"exp_6",new SCreator(exp_6_factory));
new Sfactory(this,"exp_5",new SCreator(exp_5_factory));
new Sfactory(this,"exp_4",new SCreator(exp_4_factory));
new Sfactory(this,"exp_3",new SCreator(exp_3_factory));
new Sfactory(this,"exp_2",new SCreator(exp_2_factory));
new Sfactory(this,"exp_1",new SCreator(exp_1_factory));
new Sfactory(this,"fieldlist",new SCreator(fieldlist_factory));
new Sfactory(this,"prefixexp_2",new SCreator(prefixexp_2_factory));
new Sfactory(this,"tableconstructor_1",new SCreator(tableconstructor_1_factory));
new Sfactory(this,"unop_1",new SCreator(unop_1_factory));
new Sfactory(this,"binop_1",new SCreator(binop_1_factory));
new Sfactory(this,"field_1",new SCreator(field_1_factory));
new Sfactory(this,"functioncall_1",new SCreator(functioncall_1_factory));
new Sfactory(this,"unop",new SCreator(unop_factory));
new Sfactory(this,"binop_5",new SCreator(binop_5_factory));
new Sfactory(this,"var_1",new SCreator(var_1_factory));
new Sfactory(this,"var_2",new SCreator(var_2_factory));
new Sfactory(this,"var_3",new SCreator(var_3_factory));
new Sfactory(this,"var_4",new SCreator(var_4_factory));
new Sfactory(this,"exp",new SCreator(exp_factory));
new Sfactory(this,"arg",new SCreator(arg_factory));
new Sfactory(this,"error",new SCreator(error_factory));
new Sfactory(this,"prefixexp",new SCreator(prefixexp_factory));
new Sfactory(this,"chunk",new SCreator(chunk_factory));
new Sfactory(this,"field_3",new SCreator(field_3_factory));
new Sfactory(this,"binop_2",new SCreator(binop_2_factory));
new Sfactory(this,"tableconstructor",new SCreator(tableconstructor_factory));
new Sfactory(this,"functioncall_2",new SCreator(functioncall_2_factory));
new Sfactory(this,"field",new SCreator(field_factory));
new Sfactory(this,"chunk_2",new SCreator(chunk_2_factory));
new Sfactory(this,"fieldlist_3",new SCreator(fieldlist_3_factory));
new Sfactory(this,"binop_12",new SCreator(binop_12_factory));
new Sfactory(this,"fieldlist_1",new SCreator(fieldlist_1_factory));
new Sfactory(this,"fieldsep_1",new SCreator(fieldsep_1_factory));
new Sfactory(this,"binop",new SCreator(binop_factory));
new Sfactory(this,"prefixexp_3",new SCreator(prefixexp_3_factory));
new Sfactory(this,"functioncall",new SCreator(functioncall_factory));
new Sfactory(this,"binop_13",new SCreator(binop_13_factory));
new Sfactory(this,"binop_6",new SCreator(binop_6_factory));
new Sfactory(this,"binop_10",new SCreator(binop_10_factory));
new Sfactory(this,"binop_11",new SCreator(binop_11_factory));
new Sfactory(this,"binop_3",new SCreator(binop_3_factory));
new Sfactory(this,"chunk_1",new SCreator(chunk_1_factory));
new Sfactory(this,"explist_3",new SCreator(explist_3_factory));
new Sfactory(this,"unop_3",new SCreator(unop_3_factory));
new Sfactory(this,"fieldsep",new SCreator(fieldsep_factory));
new Sfactory(this,"explist_1",new SCreator(explist_1_factory));
new Sfactory(this,"explist_2",new SCreator(explist_2_factory));
new Sfactory(this,"binop_14",new SCreator(binop_14_factory));
new Sfactory(this,"tableconstructor_2",new SCreator(tableconstructor_2_factory));
new Sfactory(this,"arg_3",new SCreator(arg_3_factory));
new Sfactory(this,"arg_2",new SCreator(arg_2_factory));
new Sfactory(this,"arg_1",new SCreator(arg_1_factory));
new Sfactory(this,"arg_5",new SCreator(arg_5_factory));
new Sfactory(this,"arg_4",new SCreator(arg_4_factory));
new Sfactory(this,"binop_7",new SCreator(binop_7_factory));
new Sfactory(this,"binop_9",new SCreator(binop_9_factory));
new Sfactory(this,"binop_8",new SCreator(binop_8_factory));
new Sfactory(this,"binop_4",new SCreator(binop_4_factory));
new Sfactory(this,"var",new SCreator(var_factory));
new Sfactory(this,"binop_15",new SCreator(binop_15_factory));
}
public static object field_2_factory(Parser yyp) { return new field_2(yyp); }
public static object explist_factory(Parser yyp) { return new explist(yyp); }
public static object unop_2_factory(Parser yyp) { return new unop_2(yyp); }
public static object fieldsep_2_factory(Parser yyp) { return new fieldsep_2(yyp); }
public static object prefixexp_1_factory(Parser yyp) { return new prefixexp_1(yyp); }
public static object fieldlist_2_factory(Parser yyp) { return new fieldlist_2(yyp); }
public static object exp_7_factory(Parser yyp) { return new exp_7(yyp); }
public static object exp_6_factory(Parser yyp) { return new exp_6(yyp); }
public static object exp_5_factory(Parser yyp) { return new exp_5(yyp); }
public static object exp_4_factory(Parser yyp) { return new exp_4(yyp); }
public static object exp_3_factory(Parser yyp) { return new exp_3(yyp); }
public static object exp_2_factory(Parser yyp) { return new exp_2(yyp); }
public static object exp_1_factory(Parser yyp) { return new exp_1(yyp); }
public static object fieldlist_factory(Parser yyp) { return new fieldlist(yyp); }
public static object prefixexp_2_factory(Parser yyp) { return new prefixexp_2(yyp); }
public static object tableconstructor_1_factory(Parser yyp) { return new tableconstructor_1(yyp); }
public static object unop_1_factory(Parser yyp) { return new unop_1(yyp); }
public static object binop_1_factory(Parser yyp) { return new binop_1(yyp); }
public static object field_1_factory(Parser yyp) { return new field_1(yyp); }
public static object functioncall_1_factory(Parser yyp) { return new functioncall_1(yyp); }
public static object unop_factory(Parser yyp) { return new unop(yyp); }
public static object binop_5_factory(Parser yyp) { return new binop_5(yyp); }
public static object var_1_factory(Parser yyp) { return new var_1(yyp); }
public static object var_2_factory(Parser yyp) { return new var_2(yyp); }
public static object var_3_factory(Parser yyp) { return new var_3(yyp); }
public static object var_4_factory(Parser yyp) { return new var_4(yyp); }
public static object exp_factory(Parser yyp) { return new exp(yyp); }
public static object arg_factory(Parser yyp) { return new arg(yyp); }
public static object error_factory(Parser yyp) { return new error(yyp); }
public static object prefixexp_factory(Parser yyp) { return new prefixexp(yyp); }
public static object chunk_factory(Parser yyp) { return new chunk(yyp); }
public static object field_3_factory(Parser yyp) { return new field_3(yyp); }
public static object binop_2_factory(Parser yyp) { return new binop_2(yyp); }
public static object tableconstructor_factory(Parser yyp) { return new tableconstructor(yyp); }
public static object functioncall_2_factory(Parser yyp) { return new functioncall_2(yyp); }
public static object field_factory(Parser yyp) { return new field(yyp); }
public static object chunk_2_factory(Parser yyp) { return new chunk_2(yyp); }
public static object fieldlist_3_factory(Parser yyp) { return new fieldlist_3(yyp); }
public static object binop_12_factory(Parser yyp) { return new binop_12(yyp); }
public static object fieldlist_1_factory(Parser yyp) { return new fieldlist_1(yyp); }
public static object fieldsep_1_factory(Parser yyp) { return new fieldsep_1(yyp); }
public static object binop_factory(Parser yyp) { return new binop(yyp); }
public static object prefixexp_3_factory(Parser yyp) { return new prefixexp_3(yyp); }
public static object functioncall_factory(Parser yyp) { return new functioncall(yyp); }
public static object binop_13_factory(Parser yyp) { return new binop_13(yyp); }
public static object binop_6_factory(Parser yyp) { return new binop_6(yyp); }
public static object binop_10_factory(Parser yyp) { return new binop_10(yyp); }
public static object binop_11_factory(Parser yyp) { return new binop_11(yyp); }
public static object binop_3_factory(Parser yyp) { return new binop_3(yyp); }
public static object chunk_1_factory(Parser yyp) { return new chunk_1(yyp); }
public static object explist_3_factory(Parser yyp) { return new explist_3(yyp); }
public static object unop_3_factory(Parser yyp) { return new unop_3(yyp); }
public static object fieldsep_factory(Parser yyp) { return new fieldsep(yyp); }
public static object explist_1_factory(Parser yyp) { return new explist_1(yyp); }
public static object explist_2_factory(Parser yyp) { return new explist_2(yyp); }
public static object binop_14_factory(Parser yyp) { return new binop_14(yyp); }
public static object tableconstructor_2_factory(Parser yyp) { return new tableconstructor_2(yyp); }
public static object arg_3_factory(Parser yyp) { return new arg_3(yyp); }
public static object arg_2_factory(Parser yyp) { return new arg_2(yyp); }
public static object arg_1_factory(Parser yyp) { return new arg_1(yyp); }
public static object arg_5_factory(Parser yyp) { return new arg_5(yyp); }
public static object arg_4_factory(Parser yyp) { return new arg_4(yyp); }
public static object binop_7_factory(Parser yyp) { return new binop_7(yyp); }
public static object binop_9_factory(Parser yyp) { return new binop_9(yyp); }
public static object binop_8_factory(Parser yyp) { return new binop_8(yyp); }
public static object binop_4_factory(Parser yyp) { return new binop_4(yyp); }
public static object var_factory(Parser yyp) { return new var(yyp); }
public static object binop_15_factory(Parser yyp) { return new binop_15(yyp); }
}
public class syntax: Parser {
public syntax():base(new yysyntax(),new tokens()) {}
public syntax(YyParser syms):base(syms,new tokens()) {}
public syntax(YyParser syms,ErrorHandler erh):base(syms,new tokens(erh)) {}

 }
}
